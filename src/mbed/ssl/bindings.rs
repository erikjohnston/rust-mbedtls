/* automatically generated by rust-bindgen */

pub type mbedtls_iso_c_forbids_empty_translation_units = ::libc::c_int;
pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed3,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed5;
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__IO_marker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20usize],
}
impl ::std::clone::Clone for Struct__IO_FILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *mut ::libc::c_char,
                  __nbytes: size_t) -> __ssize_t;
pub type __io_write_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *const ::libc::c_char,
                  __n: size_t) -> __ssize_t;
pub type __io_seek_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __pos: *mut __off64_t,
                  __w: ::libc::c_int) -> ::libc::c_int;
pub type __io_close_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
pub type mbedtls_mpi_sint = int64_t;
pub type mbedtls_mpi_uint = uint64_t;
pub type mbedtls_t_udbl = ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub s: ::libc::c_int,
    pub n: size_t,
    pub p: *mut mbedtls_mpi_uint,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_mpi = Struct_Unnamed6;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const MBEDTLS_ECP_DP_NONE: ::libc::c_uint = 0;
pub const MBEDTLS_ECP_DP_SECP192R1: ::libc::c_uint = 1;
pub const MBEDTLS_ECP_DP_SECP224R1: ::libc::c_uint = 2;
pub const MBEDTLS_ECP_DP_SECP256R1: ::libc::c_uint = 3;
pub const MBEDTLS_ECP_DP_SECP384R1: ::libc::c_uint = 4;
pub const MBEDTLS_ECP_DP_SECP521R1: ::libc::c_uint = 5;
pub const MBEDTLS_ECP_DP_BP256R1: ::libc::c_uint = 6;
pub const MBEDTLS_ECP_DP_BP384R1: ::libc::c_uint = 7;
pub const MBEDTLS_ECP_DP_BP512R1: ::libc::c_uint = 8;
pub const MBEDTLS_ECP_DP_CURVE25519: ::libc::c_uint = 9;
pub const MBEDTLS_ECP_DP_SECP192K1: ::libc::c_uint = 10;
pub const MBEDTLS_ECP_DP_SECP224K1: ::libc::c_uint = 11;
pub const MBEDTLS_ECP_DP_SECP256K1: ::libc::c_uint = 12;
pub type mbedtls_ecp_group_id = Enum_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub grp_id: mbedtls_ecp_group_id,
    pub tls_id: uint16_t,
    pub bit_size: uint16_t,
    pub name: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_ecp_curve_info = Struct_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub X: mbedtls_mpi,
    pub Y: mbedtls_mpi,
    pub Z: mbedtls_mpi,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_ecp_point = Struct_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub id: mbedtls_ecp_group_id,
    pub P: mbedtls_mpi,
    pub A: mbedtls_mpi,
    pub B: mbedtls_mpi,
    pub G: mbedtls_ecp_point,
    pub N: mbedtls_mpi,
    pub pbits: size_t,
    pub nbits: size_t,
    pub h: ::libc::c_uint,
    pub modp: ::std::option::Option<extern "C" fn(arg1: *mut mbedtls_mpi)
                                        -> ::libc::c_int>,
    pub t_pre: ::std::option::Option<extern "C" fn(arg1:
                                                       *mut mbedtls_ecp_point,
                                                   arg2: *mut ::libc::c_void)
                                         -> ::libc::c_int>,
    pub t_post: ::std::option::Option<extern "C" fn(arg1:
                                                        *mut mbedtls_ecp_point,
                                                    arg2: *mut ::libc::c_void)
                                          -> ::libc::c_int>,
    pub t_data: *mut ::libc::c_void,
    pub T: *mut mbedtls_ecp_point,
    pub T_size: size_t,
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_ecp_group = Struct_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub grp: mbedtls_ecp_group,
    pub d: mbedtls_mpi,
    pub Q: mbedtls_ecp_point,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_ecp_keypair = Struct_Unnamed11;
pub type Enum_Unnamed12 = ::libc::c_uint;
pub const MBEDTLS_MD_NONE: ::libc::c_uint = 0;
pub const MBEDTLS_MD_MD2: ::libc::c_uint = 1;
pub const MBEDTLS_MD_MD4: ::libc::c_uint = 2;
pub const MBEDTLS_MD_MD5: ::libc::c_uint = 3;
pub const MBEDTLS_MD_SHA1: ::libc::c_uint = 4;
pub const MBEDTLS_MD_SHA224: ::libc::c_uint = 5;
pub const MBEDTLS_MD_SHA256: ::libc::c_uint = 6;
pub const MBEDTLS_MD_SHA384: ::libc::c_uint = 7;
pub const MBEDTLS_MD_SHA512: ::libc::c_uint = 8;
pub const MBEDTLS_MD_RIPEMD160: ::libc::c_uint = 9;
pub type mbedtls_md_type_t = Enum_Unnamed12;
pub enum Struct_mbedtls_md_info_t { }
pub type mbedtls_md_info_t = Struct_mbedtls_md_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub md_info: *const mbedtls_md_info_t,
    pub md_ctx: *mut ::libc::c_void,
    pub hmac_ctx: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_md_context_t = Struct_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub ver: ::libc::c_int,
    pub len: size_t,
    pub N: mbedtls_mpi,
    pub E: mbedtls_mpi,
    pub D: mbedtls_mpi,
    pub P: mbedtls_mpi,
    pub Q: mbedtls_mpi,
    pub DP: mbedtls_mpi,
    pub DQ: mbedtls_mpi,
    pub QP: mbedtls_mpi,
    pub RN: mbedtls_mpi,
    pub RP: mbedtls_mpi,
    pub RQ: mbedtls_mpi,
    pub Vi: mbedtls_mpi,
    pub Vf: mbedtls_mpi,
    pub padding: ::libc::c_int,
    pub hash_id: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_rsa_context = Struct_Unnamed14;
pub type mbedtls_ecdsa_context = mbedtls_ecp_keypair;
pub type Enum_Unnamed15 = ::libc::c_uint;
pub const MBEDTLS_PK_NONE: ::libc::c_uint = 0;
pub const MBEDTLS_PK_RSA: ::libc::c_uint = 1;
pub const MBEDTLS_PK_ECKEY: ::libc::c_uint = 2;
pub const MBEDTLS_PK_ECKEY_DH: ::libc::c_uint = 3;
pub const MBEDTLS_PK_ECDSA: ::libc::c_uint = 4;
pub const MBEDTLS_PK_RSA_ALT: ::libc::c_uint = 5;
pub const MBEDTLS_PK_RSASSA_PSS: ::libc::c_uint = 6;
pub type mbedtls_pk_type_t = Enum_Unnamed15;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub mgf1_hash_id: mbedtls_md_type_t,
    pub expected_salt_len: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_pk_rsassa_pss_options = Struct_Unnamed16;
pub type Enum_Unnamed17 = ::libc::c_uint;
pub const MBEDTLS_PK_DEBUG_NONE: ::libc::c_uint = 0;
pub const MBEDTLS_PK_DEBUG_MPI: ::libc::c_uint = 1;
pub const MBEDTLS_PK_DEBUG_ECP: ::libc::c_uint = 2;
pub type mbedtls_pk_debug_type = Enum_Unnamed17;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub _type: mbedtls_pk_debug_type,
    pub name: *const ::libc::c_char,
    pub value: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_pk_debug_item = Struct_Unnamed18;
pub enum Struct_mbedtls_pk_info_t { }
pub type mbedtls_pk_info_t = Struct_mbedtls_pk_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub pk_info: *const mbedtls_pk_info_t,
    pub pk_ctx: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_pk_context = Struct_Unnamed19;
pub type mbedtls_pk_rsa_alt_decrypt_func =
    ::std::option::Option<extern "C" fn(ctx: *mut ::libc::c_void,
                                        mode: ::libc::c_int,
                                        olen: *mut size_t,
                                        input: *const ::libc::c_uchar,
                                        output: *mut ::libc::c_uchar,
                                        output_max_len: size_t)
                              -> ::libc::c_int>;
pub type mbedtls_pk_rsa_alt_sign_func =
    ::std::option::Option<extern "C" fn(ctx: *mut ::libc::c_void,
                                        f_rng:
                                            ::std::option::Option<extern "C" fn(arg1:
                                                                                    *mut ::libc::c_void,
                                                                                arg2:
                                                                                    *mut ::libc::c_uchar,
                                                                                arg3:
                                                                                    size_t)
                                                                      ->
                                                                          ::libc::c_int>,
                                        p_rng: *mut ::libc::c_void,
                                        mode: ::libc::c_int,
                                        md_alg: mbedtls_md_type_t,
                                        hashlen: ::libc::c_uint,
                                        hash: *const ::libc::c_uchar,
                                        sig: *mut ::libc::c_uchar)
                              -> ::libc::c_int>;
pub type mbedtls_pk_rsa_alt_key_len_func =
    ::std::option::Option<extern "C" fn(ctx: *mut ::libc::c_void) -> size_t>;
pub type Enum_Unnamed20 = ::libc::c_uint;
pub const MBEDTLS_CIPHER_ID_NONE: ::libc::c_uint = 0;
pub const MBEDTLS_CIPHER_ID_NULL: ::libc::c_uint = 1;
pub const MBEDTLS_CIPHER_ID_AES: ::libc::c_uint = 2;
pub const MBEDTLS_CIPHER_ID_DES: ::libc::c_uint = 3;
pub const MBEDTLS_CIPHER_ID_3DES: ::libc::c_uint = 4;
pub const MBEDTLS_CIPHER_ID_CAMELLIA: ::libc::c_uint = 5;
pub const MBEDTLS_CIPHER_ID_BLOWFISH: ::libc::c_uint = 6;
pub const MBEDTLS_CIPHER_ID_ARC4: ::libc::c_uint = 7;
pub type mbedtls_cipher_id_t = Enum_Unnamed20;
pub type Enum_Unnamed21 = ::libc::c_uint;
pub const MBEDTLS_CIPHER_NONE: ::libc::c_uint = 0;
pub const MBEDTLS_CIPHER_NULL: ::libc::c_uint = 1;
pub const MBEDTLS_CIPHER_AES_128_ECB: ::libc::c_uint = 2;
pub const MBEDTLS_CIPHER_AES_192_ECB: ::libc::c_uint = 3;
pub const MBEDTLS_CIPHER_AES_256_ECB: ::libc::c_uint = 4;
pub const MBEDTLS_CIPHER_AES_128_CBC: ::libc::c_uint = 5;
pub const MBEDTLS_CIPHER_AES_192_CBC: ::libc::c_uint = 6;
pub const MBEDTLS_CIPHER_AES_256_CBC: ::libc::c_uint = 7;
pub const MBEDTLS_CIPHER_AES_128_CFB128: ::libc::c_uint = 8;
pub const MBEDTLS_CIPHER_AES_192_CFB128: ::libc::c_uint = 9;
pub const MBEDTLS_CIPHER_AES_256_CFB128: ::libc::c_uint = 10;
pub const MBEDTLS_CIPHER_AES_128_CTR: ::libc::c_uint = 11;
pub const MBEDTLS_CIPHER_AES_192_CTR: ::libc::c_uint = 12;
pub const MBEDTLS_CIPHER_AES_256_CTR: ::libc::c_uint = 13;
pub const MBEDTLS_CIPHER_AES_128_GCM: ::libc::c_uint = 14;
pub const MBEDTLS_CIPHER_AES_192_GCM: ::libc::c_uint = 15;
pub const MBEDTLS_CIPHER_AES_256_GCM: ::libc::c_uint = 16;
pub const MBEDTLS_CIPHER_CAMELLIA_128_ECB: ::libc::c_uint = 17;
pub const MBEDTLS_CIPHER_CAMELLIA_192_ECB: ::libc::c_uint = 18;
pub const MBEDTLS_CIPHER_CAMELLIA_256_ECB: ::libc::c_uint = 19;
pub const MBEDTLS_CIPHER_CAMELLIA_128_CBC: ::libc::c_uint = 20;
pub const MBEDTLS_CIPHER_CAMELLIA_192_CBC: ::libc::c_uint = 21;
pub const MBEDTLS_CIPHER_CAMELLIA_256_CBC: ::libc::c_uint = 22;
pub const MBEDTLS_CIPHER_CAMELLIA_128_CFB128: ::libc::c_uint = 23;
pub const MBEDTLS_CIPHER_CAMELLIA_192_CFB128: ::libc::c_uint = 24;
pub const MBEDTLS_CIPHER_CAMELLIA_256_CFB128: ::libc::c_uint = 25;
pub const MBEDTLS_CIPHER_CAMELLIA_128_CTR: ::libc::c_uint = 26;
pub const MBEDTLS_CIPHER_CAMELLIA_192_CTR: ::libc::c_uint = 27;
pub const MBEDTLS_CIPHER_CAMELLIA_256_CTR: ::libc::c_uint = 28;
pub const MBEDTLS_CIPHER_CAMELLIA_128_GCM: ::libc::c_uint = 29;
pub const MBEDTLS_CIPHER_CAMELLIA_192_GCM: ::libc::c_uint = 30;
pub const MBEDTLS_CIPHER_CAMELLIA_256_GCM: ::libc::c_uint = 31;
pub const MBEDTLS_CIPHER_DES_ECB: ::libc::c_uint = 32;
pub const MBEDTLS_CIPHER_DES_CBC: ::libc::c_uint = 33;
pub const MBEDTLS_CIPHER_DES_EDE_ECB: ::libc::c_uint = 34;
pub const MBEDTLS_CIPHER_DES_EDE_CBC: ::libc::c_uint = 35;
pub const MBEDTLS_CIPHER_DES_EDE3_ECB: ::libc::c_uint = 36;
pub const MBEDTLS_CIPHER_DES_EDE3_CBC: ::libc::c_uint = 37;
pub const MBEDTLS_CIPHER_BLOWFISH_ECB: ::libc::c_uint = 38;
pub const MBEDTLS_CIPHER_BLOWFISH_CBC: ::libc::c_uint = 39;
pub const MBEDTLS_CIPHER_BLOWFISH_CFB64: ::libc::c_uint = 40;
pub const MBEDTLS_CIPHER_BLOWFISH_CTR: ::libc::c_uint = 41;
pub const MBEDTLS_CIPHER_ARC4_128: ::libc::c_uint = 42;
pub const MBEDTLS_CIPHER_AES_128_CCM: ::libc::c_uint = 43;
pub const MBEDTLS_CIPHER_AES_192_CCM: ::libc::c_uint = 44;
pub const MBEDTLS_CIPHER_AES_256_CCM: ::libc::c_uint = 45;
pub const MBEDTLS_CIPHER_CAMELLIA_128_CCM: ::libc::c_uint = 46;
pub const MBEDTLS_CIPHER_CAMELLIA_192_CCM: ::libc::c_uint = 47;
pub const MBEDTLS_CIPHER_CAMELLIA_256_CCM: ::libc::c_uint = 48;
pub type mbedtls_cipher_type_t = Enum_Unnamed21;
pub type Enum_Unnamed22 = ::libc::c_uint;
pub const MBEDTLS_MODE_NONE: ::libc::c_uint = 0;
pub const MBEDTLS_MODE_ECB: ::libc::c_uint = 1;
pub const MBEDTLS_MODE_CBC: ::libc::c_uint = 2;
pub const MBEDTLS_MODE_CFB: ::libc::c_uint = 3;
pub const MBEDTLS_MODE_OFB: ::libc::c_uint = 4;
pub const MBEDTLS_MODE_CTR: ::libc::c_uint = 5;
pub const MBEDTLS_MODE_GCM: ::libc::c_uint = 6;
pub const MBEDTLS_MODE_STREAM: ::libc::c_uint = 7;
pub const MBEDTLS_MODE_CCM: ::libc::c_uint = 8;
pub type mbedtls_cipher_mode_t = Enum_Unnamed22;
pub type Enum_Unnamed23 = ::libc::c_uint;
pub const MBEDTLS_PADDING_PKCS7: ::libc::c_uint = 0;
pub const MBEDTLS_PADDING_ONE_AND_ZEROS: ::libc::c_uint = 1;
pub const MBEDTLS_PADDING_ZEROS_AND_LEN: ::libc::c_uint = 2;
pub const MBEDTLS_PADDING_ZEROS: ::libc::c_uint = 3;
pub const MBEDTLS_PADDING_NONE: ::libc::c_uint = 4;
pub type mbedtls_cipher_padding_t = Enum_Unnamed23;
pub type Enum_Unnamed24 = ::libc::c_int;
pub const MBEDTLS_OPERATION_NONE: ::libc::c_int = -1;
pub const MBEDTLS_DECRYPT: ::libc::c_int = 0;
pub const MBEDTLS_ENCRYPT: ::libc::c_int = 1;
pub type mbedtls_operation_t = Enum_Unnamed24;
pub type Enum_Unnamed25 = ::libc::c_uint;
pub const MBEDTLS_KEY_LENGTH_NONE: ::libc::c_uint = 0;
pub const MBEDTLS_KEY_LENGTH_DES: ::libc::c_uint = 64;
pub const MBEDTLS_KEY_LENGTH_DES_EDE: ::libc::c_uint = 128;
pub const MBEDTLS_KEY_LENGTH_DES_EDE3: ::libc::c_uint = 192;
pub enum Struct_mbedtls_cipher_base_t { }
pub type mbedtls_cipher_base_t = Struct_mbedtls_cipher_base_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed26 {
    pub _type: mbedtls_cipher_type_t,
    pub mode: mbedtls_cipher_mode_t,
    pub key_bitlen: ::libc::c_uint,
    pub name: *const ::libc::c_char,
    pub iv_size: ::libc::c_uint,
    pub flags: ::libc::c_int,
    pub block_size: ::libc::c_uint,
    pub base: *const mbedtls_cipher_base_t,
}
impl ::std::clone::Clone for Struct_Unnamed26 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed26 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_cipher_info_t = Struct_Unnamed26;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed27 {
    pub cipher_info: *const mbedtls_cipher_info_t,
    pub key_bitlen: ::libc::c_int,
    pub operation: mbedtls_operation_t,
    pub add_padding: ::std::option::Option<extern "C" fn(output:
                                                             *mut ::libc::c_uchar,
                                                         olen: size_t,
                                                         data_len: size_t)
                                               -> ()>,
    pub get_padding: ::std::option::Option<extern "C" fn(input:
                                                             *mut ::libc::c_uchar,
                                                         ilen: size_t,
                                                         data_len:
                                                             *mut size_t)
                                               -> ::libc::c_int>,
    pub unprocessed_data: [::libc::c_uchar; 16usize],
    pub unprocessed_len: size_t,
    pub iv: [::libc::c_uchar; 16usize],
    pub iv_size: size_t,
    pub cipher_ctx: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed27 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_cipher_context_t = Struct_Unnamed27;
pub type Enum_Unnamed28 = ::libc::c_uint;
pub const MBEDTLS_KEY_EXCHANGE_NONE: ::libc::c_uint = 0;
pub const MBEDTLS_KEY_EXCHANGE_RSA: ::libc::c_uint = 1;
pub const MBEDTLS_KEY_EXCHANGE_DHE_RSA: ::libc::c_uint = 2;
pub const MBEDTLS_KEY_EXCHANGE_ECDHE_RSA: ::libc::c_uint = 3;
pub const MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA: ::libc::c_uint = 4;
pub const MBEDTLS_KEY_EXCHANGE_PSK: ::libc::c_uint = 5;
pub const MBEDTLS_KEY_EXCHANGE_DHE_PSK: ::libc::c_uint = 6;
pub const MBEDTLS_KEY_EXCHANGE_RSA_PSK: ::libc::c_uint = 7;
pub const MBEDTLS_KEY_EXCHANGE_ECDHE_PSK: ::libc::c_uint = 8;
pub const MBEDTLS_KEY_EXCHANGE_ECDH_RSA: ::libc::c_uint = 9;
pub const MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA: ::libc::c_uint = 10;
pub type mbedtls_key_exchange_type_t = Enum_Unnamed28;
pub type mbedtls_ssl_ciphersuite_t = Struct_mbedtls_ssl_ciphersuite_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_ssl_ciphersuite_t {
    pub id: ::libc::c_int,
    pub name: *const ::libc::c_char,
    pub cipher: mbedtls_cipher_type_t,
    pub mac: mbedtls_md_type_t,
    pub key_exchange: mbedtls_key_exchange_type_t,
    pub min_major_ver: ::libc::c_int,
    pub min_minor_ver: ::libc::c_int,
    pub max_major_ver: ::libc::c_int,
    pub max_minor_ver: ::libc::c_int,
    pub flags: ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct_mbedtls_ssl_ciphersuite_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_ssl_ciphersuite_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_asn1_buf {
    pub tag: ::libc::c_int,
    pub len: size_t,
    pub p: *mut ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct_mbedtls_asn1_buf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_asn1_buf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_asn1_buf = Struct_mbedtls_asn1_buf;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_asn1_bitstring {
    pub len: size_t,
    pub unused_bits: ::libc::c_uchar,
    pub p: *mut ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct_mbedtls_asn1_bitstring {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_asn1_bitstring {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_asn1_bitstring = Struct_mbedtls_asn1_bitstring;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_asn1_sequence {
    pub buf: mbedtls_asn1_buf,
    pub next: *mut Struct_mbedtls_asn1_sequence,
}
impl ::std::clone::Clone for Struct_mbedtls_asn1_sequence {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_asn1_sequence {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_asn1_sequence = Struct_mbedtls_asn1_sequence;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_asn1_named_data {
    pub oid: mbedtls_asn1_buf,
    pub val: mbedtls_asn1_buf,
    pub next: *mut Struct_mbedtls_asn1_named_data,
    pub next_merged: ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct_mbedtls_asn1_named_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_asn1_named_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_asn1_named_data = Struct_mbedtls_asn1_named_data;
pub type mbedtls_x509_buf = mbedtls_asn1_buf;
pub type mbedtls_x509_bitstring = mbedtls_asn1_bitstring;
pub type mbedtls_x509_name = mbedtls_asn1_named_data;
pub type mbedtls_x509_sequence = mbedtls_asn1_sequence;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_x509_time {
    pub year: ::libc::c_int,
    pub mon: ::libc::c_int,
    pub day: ::libc::c_int,
    pub hour: ::libc::c_int,
    pub min: ::libc::c_int,
    pub sec: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_mbedtls_x509_time {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_x509_time {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_x509_time = Struct_mbedtls_x509_time;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_x509_crl_entry {
    pub raw: mbedtls_x509_buf,
    pub serial: mbedtls_x509_buf,
    pub revocation_date: mbedtls_x509_time,
    pub entry_ext: mbedtls_x509_buf,
    pub next: *mut Struct_mbedtls_x509_crl_entry,
}
impl ::std::clone::Clone for Struct_mbedtls_x509_crl_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_x509_crl_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_x509_crl_entry = Struct_mbedtls_x509_crl_entry;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_x509_crl {
    pub raw: mbedtls_x509_buf,
    pub tbs: mbedtls_x509_buf,
    pub version: ::libc::c_int,
    pub sig_oid: mbedtls_x509_buf,
    pub issuer_raw: mbedtls_x509_buf,
    pub issuer: mbedtls_x509_name,
    pub this_update: mbedtls_x509_time,
    pub next_update: mbedtls_x509_time,
    pub entry: mbedtls_x509_crl_entry,
    pub crl_ext: mbedtls_x509_buf,
    pub sig_oid2: mbedtls_x509_buf,
    pub sig: mbedtls_x509_buf,
    pub sig_md: mbedtls_md_type_t,
    pub sig_pk: mbedtls_pk_type_t,
    pub sig_opts: *mut ::libc::c_void,
    pub next: *mut Struct_mbedtls_x509_crl,
}
impl ::std::clone::Clone for Struct_mbedtls_x509_crl {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_x509_crl {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_x509_crl = Struct_mbedtls_x509_crl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_x509_crt {
    pub raw: mbedtls_x509_buf,
    pub tbs: mbedtls_x509_buf,
    pub version: ::libc::c_int,
    pub serial: mbedtls_x509_buf,
    pub sig_oid: mbedtls_x509_buf,
    pub issuer_raw: mbedtls_x509_buf,
    pub subject_raw: mbedtls_x509_buf,
    pub issuer: mbedtls_x509_name,
    pub subject: mbedtls_x509_name,
    pub valid_from: mbedtls_x509_time,
    pub valid_to: mbedtls_x509_time,
    pub pk: mbedtls_pk_context,
    pub issuer_id: mbedtls_x509_buf,
    pub subject_id: mbedtls_x509_buf,
    pub v3_ext: mbedtls_x509_buf,
    pub subject_alt_names: mbedtls_x509_sequence,
    pub ext_types: ::libc::c_int,
    pub ca_istrue: ::libc::c_int,
    pub max_pathlen: ::libc::c_int,
    pub key_usage: ::libc::c_uint,
    pub ext_key_usage: mbedtls_x509_sequence,
    pub ns_cert_type: ::libc::c_uchar,
    pub sig: mbedtls_x509_buf,
    pub sig_md: mbedtls_md_type_t,
    pub sig_pk: mbedtls_pk_type_t,
    pub sig_opts: *mut ::libc::c_void,
    pub next: *mut Struct_mbedtls_x509_crt,
}
impl ::std::clone::Clone for Struct_mbedtls_x509_crt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_x509_crt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_x509_crt = Struct_mbedtls_x509_crt;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed29 {
    pub allowed_mds: uint32_t,
    pub allowed_pks: uint32_t,
    pub allowed_curves: uint32_t,
    pub rsa_min_bitlen: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed29 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_x509_crt_profile = Struct_Unnamed29;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_x509write_cert {
    pub version: ::libc::c_int,
    pub serial: mbedtls_mpi,
    pub subject_key: *mut mbedtls_pk_context,
    pub issuer_key: *mut mbedtls_pk_context,
    pub subject: *mut mbedtls_asn1_named_data,
    pub issuer: *mut mbedtls_asn1_named_data,
    pub md_alg: mbedtls_md_type_t,
    pub not_before: [::libc::c_char; 16usize],
    pub not_after: [::libc::c_char; 16usize],
    pub extensions: *mut mbedtls_asn1_named_data,
}
impl ::std::clone::Clone for Struct_mbedtls_x509write_cert {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_x509write_cert {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_x509write_cert = Struct_mbedtls_x509write_cert;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed30 {
    pub len: size_t,
    pub P: mbedtls_mpi,
    pub G: mbedtls_mpi,
    pub X: mbedtls_mpi,
    pub GX: mbedtls_mpi,
    pub GY: mbedtls_mpi,
    pub K: mbedtls_mpi,
    pub RP: mbedtls_mpi,
    pub Vi: mbedtls_mpi,
    pub Vf: mbedtls_mpi,
    pub pX: mbedtls_mpi,
}
impl ::std::clone::Clone for Struct_Unnamed30 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed30 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_dhm_context = Struct_Unnamed30;
pub type Enum_Unnamed31 = ::libc::c_uint;
pub const MBEDTLS_ECDH_OURS: ::libc::c_uint = 0;
pub const MBEDTLS_ECDH_THEIRS: ::libc::c_uint = 1;
pub type mbedtls_ecdh_side = Enum_Unnamed31;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed32 {
    pub grp: mbedtls_ecp_group,
    pub d: mbedtls_mpi,
    pub Q: mbedtls_ecp_point,
    pub Qp: mbedtls_ecp_point,
    pub z: mbedtls_mpi,
    pub point_format: ::libc::c_int,
    pub Vi: mbedtls_ecp_point,
    pub Vf: mbedtls_ecp_point,
    pub _d: mbedtls_mpi,
}
impl ::std::clone::Clone for Struct_Unnamed32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_ecdh_context = Struct_Unnamed32;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::clone::Clone for Struct_itimerspec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_sigevent { }
pub type pid_t = __pid_t;
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_mbedtls_ssl_premaster_secret {
    pub _bindgen_data_: [u8; 1060usize],
}
impl Union_mbedtls_ssl_premaster_secret {
    pub unsafe fn _pms_rsa(&mut self) -> *mut [::libc::c_uchar; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _pms_dhm(&mut self) -> *mut [::libc::c_uchar; 1024usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _pms_ecdh(&mut self) -> *mut [::libc::c_uchar; 66usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _pms_psk(&mut self) -> *mut [::libc::c_uchar; 68usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _pms_dhe_psk(&mut self)
     -> *mut [::libc::c_uchar; 1060usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _pms_rsa_psk(&mut self) -> *mut [::libc::c_uchar; 84usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _pms_ecdhe_psk(&mut self)
     -> *mut [::libc::c_uchar; 102usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_mbedtls_ssl_premaster_secret {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_mbedtls_ssl_premaster_secret {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed33 = ::libc::c_uint;
pub const MBEDTLS_SSL_HELLO_REQUEST: ::libc::c_uint = 0;
pub const MBEDTLS_SSL_CLIENT_HELLO: ::libc::c_uint = 1;
pub const MBEDTLS_SSL_SERVER_HELLO: ::libc::c_uint = 2;
pub const MBEDTLS_SSL_SERVER_CERTIFICATE: ::libc::c_uint = 3;
pub const MBEDTLS_SSL_SERVER_KEY_EXCHANGE: ::libc::c_uint = 4;
pub const MBEDTLS_SSL_CERTIFICATE_REQUEST: ::libc::c_uint = 5;
pub const MBEDTLS_SSL_SERVER_HELLO_DONE: ::libc::c_uint = 6;
pub const MBEDTLS_SSL_CLIENT_CERTIFICATE: ::libc::c_uint = 7;
pub const MBEDTLS_SSL_CLIENT_KEY_EXCHANGE: ::libc::c_uint = 8;
pub const MBEDTLS_SSL_CERTIFICATE_VERIFY: ::libc::c_uint = 9;
pub const MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC: ::libc::c_uint = 10;
pub const MBEDTLS_SSL_CLIENT_FINISHED: ::libc::c_uint = 11;
pub const MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC: ::libc::c_uint = 12;
pub const MBEDTLS_SSL_SERVER_FINISHED: ::libc::c_uint = 13;
pub const MBEDTLS_SSL_FLUSH_BUFFERS: ::libc::c_uint = 14;
pub const MBEDTLS_SSL_HANDSHAKE_WRAPUP: ::libc::c_uint = 15;
pub const MBEDTLS_SSL_HANDSHAKE_OVER: ::libc::c_uint = 16;
pub const MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET: ::libc::c_uint = 17;
pub const MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT: ::libc::c_uint = 18;
pub type mbedtls_ssl_states = Enum_Unnamed33;
pub type mbedtls_ssl_session = Struct_mbedtls_ssl_session;
pub type mbedtls_ssl_context = Struct_mbedtls_ssl_context;
pub type mbedtls_ssl_config = Struct_mbedtls_ssl_config;
pub enum Struct_mbedtls_ssl_transform { }
pub type mbedtls_ssl_transform = Struct_mbedtls_ssl_transform;
pub enum Struct_mbedtls_ssl_handshake_params { }
pub type mbedtls_ssl_handshake_params = Struct_mbedtls_ssl_handshake_params;
pub enum Struct_mbedtls_ssl_key_cert { }
pub type mbedtls_ssl_key_cert = Struct_mbedtls_ssl_key_cert;
pub enum Struct_mbedtls_ssl_flight_item { }
pub type mbedtls_ssl_flight_item = Struct_mbedtls_ssl_flight_item;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_ssl_session {
    pub start: time_t,
    pub ciphersuite: ::libc::c_int,
    pub compression: ::libc::c_int,
    pub id_len: size_t,
    pub id: [::libc::c_uchar; 32usize],
    pub master: [::libc::c_uchar; 48usize],
    pub peer_cert: *mut mbedtls_x509_crt,
    pub verify_result: uint32_t,
    pub ticket: *mut ::libc::c_uchar,
    pub ticket_len: size_t,
    pub ticket_lifetime: uint32_t,
    pub mfl_code: ::libc::c_uchar,
    pub trunc_hmac: ::libc::c_int,
    pub encrypt_then_mac: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_mbedtls_ssl_session {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_ssl_session {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_ssl_config {
    pub ciphersuite_list: [*const ::libc::c_int; 4usize],
    pub f_dbg: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2: ::libc::c_int,
                                                   arg3:
                                                       *const ::libc::c_char,
                                                   arg4: ::libc::c_int,
                                                   arg5:
                                                       *const ::libc::c_char)
                                         -> ()>,
    pub p_dbg: *mut ::libc::c_void,
    pub f_rng: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2: *mut ::libc::c_uchar,
                                                   arg3: size_t)
                                         -> ::libc::c_int>,
    pub p_rng: *mut ::libc::c_void,
    pub f_get_cache: ::std::option::Option<extern "C" fn(arg1:
                                                             *mut ::libc::c_void,
                                                         arg2:
                                                             *mut mbedtls_ssl_session)
                                               -> ::libc::c_int>,
    pub f_set_cache: ::std::option::Option<extern "C" fn(arg1:
                                                             *mut ::libc::c_void,
                                                         arg2:
                                                             *const mbedtls_ssl_session)
                                               -> ::libc::c_int>,
    pub p_cache: *mut ::libc::c_void,
    pub f_sni: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2:
                                                       *mut mbedtls_ssl_context,
                                                   arg3:
                                                       *const ::libc::c_uchar,
                                                   arg4: size_t)
                                         -> ::libc::c_int>,
    pub p_sni: *mut ::libc::c_void,
    pub f_vrfy: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                    arg2:
                                                        *mut mbedtls_x509_crt,
                                                    arg3: ::libc::c_int,
                                                    arg4: *mut uint32_t)
                                          -> ::libc::c_int>,
    pub p_vrfy: *mut ::libc::c_void,
    pub f_psk: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2:
                                                       *mut mbedtls_ssl_context,
                                                   arg3:
                                                       *const ::libc::c_uchar,
                                                   arg4: size_t)
                                         -> ::libc::c_int>,
    pub p_psk: *mut ::libc::c_void,
    pub f_cookie_write: ::std::option::Option<extern "C" fn(arg1:
                                                                *mut ::libc::c_void,
                                                            arg2:
                                                                *mut *mut ::libc::c_uchar,
                                                            arg3:
                                                                *mut ::libc::c_uchar,
                                                            arg4:
                                                                *const ::libc::c_uchar,
                                                            arg5: size_t)
                                                  -> ::libc::c_int>,
    pub f_cookie_check: ::std::option::Option<extern "C" fn(arg1:
                                                                *mut ::libc::c_void,
                                                            arg2:
                                                                *const ::libc::c_uchar,
                                                            arg3: size_t,
                                                            arg4:
                                                                *const ::libc::c_uchar,
                                                            arg5: size_t)
                                                  -> ::libc::c_int>,
    pub p_cookie: *mut ::libc::c_void,
    pub f_ticket_write: ::std::option::Option<extern "C" fn(arg1:
                                                                *mut ::libc::c_void,
                                                            arg2:
                                                                *const mbedtls_ssl_session,
                                                            arg3:
                                                                *mut ::libc::c_uchar,
                                                            arg4:
                                                                *const ::libc::c_uchar,
                                                            arg5: *mut size_t,
                                                            arg6:
                                                                *mut uint32_t)
                                                  -> ::libc::c_int>,
    pub f_ticket_parse: ::std::option::Option<extern "C" fn(arg1:
                                                                *mut ::libc::c_void,
                                                            arg2:
                                                                *mut mbedtls_ssl_session,
                                                            arg3:
                                                                *mut ::libc::c_uchar,
                                                            arg4: size_t)
                                                  -> ::libc::c_int>,
    pub p_ticket: *mut ::libc::c_void,
    pub cert_profile: *const mbedtls_x509_crt_profile,
    pub key_cert: *mut mbedtls_ssl_key_cert,
    pub ca_chain: *mut mbedtls_x509_crt,
    pub ca_crl: *mut mbedtls_x509_crl,
    pub sig_hashes: *const ::libc::c_int,
    pub curve_list: *const mbedtls_ecp_group_id,
    pub dhm_P: mbedtls_mpi,
    pub dhm_G: mbedtls_mpi,
    pub psk: *mut ::libc::c_uchar,
    pub psk_len: size_t,
    pub psk_identity: *mut ::libc::c_uchar,
    pub psk_identity_len: size_t,
    pub alpn_list: *mut *const ::libc::c_char,
    pub read_timeout: uint32_t,
    pub hs_timeout_min: uint32_t,
    pub hs_timeout_max: uint32_t,
    pub renego_max_records: ::libc::c_int,
    pub renego_period: [::libc::c_uchar; 8usize],
    pub badmac_limit: ::libc::c_uint,
    pub dhm_min_bitlen: ::libc::c_uint,
    pub max_major_ver: ::libc::c_uchar,
    pub max_minor_ver: ::libc::c_uchar,
    pub min_major_ver: ::libc::c_uchar,
    pub min_minor_ver: ::libc::c_uchar,
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_mbedtls_ssl_config {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_ssl_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mbedtls_ssl_context {
    pub conf: *const mbedtls_ssl_config,
    pub state: ::libc::c_int,
    pub renego_status: ::libc::c_int,
    pub renego_records_seen: ::libc::c_int,
    pub major_ver: ::libc::c_int,
    pub minor_ver: ::libc::c_int,
    pub badmac_seen: ::libc::c_uint,
    pub f_send: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                    arg2:
                                                        *const ::libc::c_uchar,
                                                    arg3: size_t)
                                          -> ::libc::c_int>,
    pub f_recv: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                    arg2:
                                                        *mut ::libc::c_uchar,
                                                    arg3: size_t)
                                          -> ::libc::c_int>,
    pub f_recv_timeout: ::std::option::Option<extern "C" fn(arg1:
                                                                *mut ::libc::c_void,
                                                            arg2:
                                                                *mut ::libc::c_uchar,
                                                            arg3: size_t,
                                                            arg4: uint32_t)
                                                  -> ::libc::c_int>,
    pub p_bio: *mut ::libc::c_void,
    pub session_in: *mut mbedtls_ssl_session,
    pub session_out: *mut mbedtls_ssl_session,
    pub session: *mut mbedtls_ssl_session,
    pub session_negotiate: *mut mbedtls_ssl_session,
    pub handshake: *mut mbedtls_ssl_handshake_params,
    pub transform_in: *mut mbedtls_ssl_transform,
    pub transform_out: *mut mbedtls_ssl_transform,
    pub transform: *mut mbedtls_ssl_transform,
    pub transform_negotiate: *mut mbedtls_ssl_transform,
    pub p_timer: *mut ::libc::c_void,
    pub f_set_timer: ::std::option::Option<extern "C" fn(arg1:
                                                             *mut ::libc::c_void,
                                                         arg2: uint32_t,
                                                         arg3: uint32_t)
                                               -> ()>,
    pub f_get_timer: ::std::option::Option<extern "C" fn(arg1:
                                                             *mut ::libc::c_void)
                                               -> ::libc::c_int>,
    pub in_buf: *mut ::libc::c_uchar,
    pub in_ctr: *mut ::libc::c_uchar,
    pub in_hdr: *mut ::libc::c_uchar,
    pub in_len: *mut ::libc::c_uchar,
    pub in_iv: *mut ::libc::c_uchar,
    pub in_msg: *mut ::libc::c_uchar,
    pub in_offt: *mut ::libc::c_uchar,
    pub in_msgtype: ::libc::c_int,
    pub in_msglen: size_t,
    pub in_left: size_t,
    pub in_epoch: uint16_t,
    pub next_record_offset: size_t,
    pub in_window_top: uint64_t,
    pub in_window: uint64_t,
    pub in_hslen: size_t,
    pub nb_zero: ::libc::c_int,
    pub record_read: ::libc::c_int,
    pub out_buf: *mut ::libc::c_uchar,
    pub out_ctr: *mut ::libc::c_uchar,
    pub out_hdr: *mut ::libc::c_uchar,
    pub out_len: *mut ::libc::c_uchar,
    pub out_iv: *mut ::libc::c_uchar,
    pub out_msg: *mut ::libc::c_uchar,
    pub out_msgtype: ::libc::c_int,
    pub out_msglen: size_t,
    pub out_left: size_t,
    pub split_done: ::libc::c_char,
    pub client_auth: ::libc::c_int,
    pub hostname: *mut ::libc::c_char,
    pub alpn_chosen: *const ::libc::c_char,
    pub cli_id: *mut ::libc::c_uchar,
    pub cli_id_len: size_t,
    pub secure_renegotiation: ::libc::c_int,
    pub verify_data_len: size_t,
    pub own_verify_data: [::libc::c_char; 36usize],
    pub peer_verify_data: [::libc::c_char; 36usize],
}
impl ::std::clone::Clone for Struct_mbedtls_ssl_context {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mbedtls_ssl_context {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mbedtls_ssl_ticket_write_t =
    extern "C" fn(p_ticket: *mut ::libc::c_void,
                  session: *const mbedtls_ssl_session,
                  start: *mut ::libc::c_uchar, end: *const ::libc::c_uchar,
                  tlen: *mut size_t, lifetime: *mut uint32_t)
        -> ::libc::c_int;
pub type mbedtls_ssl_ticket_parse_t =
    extern "C" fn(p_ticket: *mut ::libc::c_void,
                  session: *mut mbedtls_ssl_session,
                  buf: *mut ::libc::c_uchar, len: size_t) -> ::libc::c_int;
pub type mbedtls_ssl_cookie_write_t =
    extern "C" fn(ctx: *mut ::libc::c_void, p: *mut *mut ::libc::c_uchar,
                  end: *mut ::libc::c_uchar, info: *const ::libc::c_uchar,
                  ilen: size_t) -> ::libc::c_int;
pub type mbedtls_ssl_cookie_check_t =
    extern "C" fn(ctx: *mut ::libc::c_void, cookie: *const ::libc::c_uchar,
                  clen: size_t, info: *const ::libc::c_uchar, ilen: size_t)
        -> ::libc::c_int;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "mbedtls")]
#[link(name = "mbedx509")]
#[link(name = "mbedcrypto")]
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mbedtls_x509_crt_profile_default: mbedtls_x509_crt_profile;
    pub static mbedtls_x509_crt_profile_next: mbedtls_x509_crt_profile;
    pub static mbedtls_x509_crt_profile_suiteb: mbedtls_x509_crt_profile;
    pub static mut __tzname: [*mut ::libc::c_char; 2usize];
    pub static mut __daylight: ::libc::c_int;
    pub static mut __timezone: ::libc::c_long;
    pub static mut tzname: [*mut ::libc::c_char; 2usize];
    pub static mut daylight: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
}
#[link(name = "mbedtls")]
#[link(name = "mbedx509")]
#[link(name = "mbedcrypto")]
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list) -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t)
     -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int, arg4: ::libc::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int, __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char, __pfx: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void, __len: size_t,
                    __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int, __n: size_t) -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                     __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                    __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                     __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char, __n: ::libc::c_int,
                 __stream: *mut FILE) -> *mut ::libc::c_char;
    pub fn gets(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                      __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                    __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::libc::c_long,
                 __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn mbedtls_mpi_init(X: *mut mbedtls_mpi) -> ();
    pub fn mbedtls_mpi_free(X: *mut mbedtls_mpi) -> ();
    pub fn mbedtls_mpi_grow(X: *mut mbedtls_mpi, nblimbs: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_shrink(X: *mut mbedtls_mpi, nblimbs: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_copy(X: *mut mbedtls_mpi, Y: *const mbedtls_mpi)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_swap(X: *mut mbedtls_mpi, Y: *mut mbedtls_mpi) -> ();
    pub fn mbedtls_mpi_safe_cond_assign(X: *mut mbedtls_mpi,
                                        Y: *const mbedtls_mpi,
                                        assign: ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_safe_cond_swap(X: *mut mbedtls_mpi,
                                      Y: *mut mbedtls_mpi,
                                      assign: ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_lset(X: *mut mbedtls_mpi, z: mbedtls_mpi_sint)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_get_bit(X: *const mbedtls_mpi, pos: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_set_bit(X: *mut mbedtls_mpi, pos: size_t,
                               val: ::libc::c_uchar) -> ::libc::c_int;
    pub fn mbedtls_mpi_lsb(X: *const mbedtls_mpi) -> size_t;
    pub fn mbedtls_mpi_bitlen(X: *const mbedtls_mpi) -> size_t;
    pub fn mbedtls_mpi_size(X: *const mbedtls_mpi) -> size_t;
    pub fn mbedtls_mpi_read_string(X: *mut mbedtls_mpi, radix: ::libc::c_int,
                                   s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn mbedtls_mpi_write_string(X: *const mbedtls_mpi,
                                    radix: ::libc::c_int,
                                    buf: *mut ::libc::c_char, buflen: size_t,
                                    olen: *mut size_t) -> ::libc::c_int;
    pub fn mbedtls_mpi_read_file(X: *mut mbedtls_mpi, radix: ::libc::c_int,
                                 fin: *mut FILE) -> ::libc::c_int;
    pub fn mbedtls_mpi_write_file(p: *const ::libc::c_char,
                                  X: *const mbedtls_mpi, radix: ::libc::c_int,
                                  fout: *mut FILE) -> ::libc::c_int;
    pub fn mbedtls_mpi_read_binary(X: *mut mbedtls_mpi,
                                   buf: *const ::libc::c_uchar,
                                   buflen: size_t) -> ::libc::c_int;
    pub fn mbedtls_mpi_write_binary(X: *const mbedtls_mpi,
                                    buf: *mut ::libc::c_uchar, buflen: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_shift_l(X: *mut mbedtls_mpi, count: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_shift_r(X: *mut mbedtls_mpi, count: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_cmp_abs(X: *const mbedtls_mpi, Y: *const mbedtls_mpi)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_cmp_mpi(X: *const mbedtls_mpi, Y: *const mbedtls_mpi)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_cmp_int(X: *const mbedtls_mpi, z: mbedtls_mpi_sint)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_add_abs(X: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                               B: *const mbedtls_mpi) -> ::libc::c_int;
    pub fn mbedtls_mpi_sub_abs(X: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                               B: *const mbedtls_mpi) -> ::libc::c_int;
    pub fn mbedtls_mpi_add_mpi(X: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                               B: *const mbedtls_mpi) -> ::libc::c_int;
    pub fn mbedtls_mpi_sub_mpi(X: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                               B: *const mbedtls_mpi) -> ::libc::c_int;
    pub fn mbedtls_mpi_add_int(X: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                               b: mbedtls_mpi_sint) -> ::libc::c_int;
    pub fn mbedtls_mpi_sub_int(X: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                               b: mbedtls_mpi_sint) -> ::libc::c_int;
    pub fn mbedtls_mpi_mul_mpi(X: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                               B: *const mbedtls_mpi) -> ::libc::c_int;
    pub fn mbedtls_mpi_mul_int(X: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                               b: mbedtls_mpi_uint) -> ::libc::c_int;
    pub fn mbedtls_mpi_div_mpi(Q: *mut mbedtls_mpi, R: *mut mbedtls_mpi,
                               A: *const mbedtls_mpi, B: *const mbedtls_mpi)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_div_int(Q: *mut mbedtls_mpi, R: *mut mbedtls_mpi,
                               A: *const mbedtls_mpi, b: mbedtls_mpi_sint)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_mod_mpi(R: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                               B: *const mbedtls_mpi) -> ::libc::c_int;
    pub fn mbedtls_mpi_mod_int(r: *mut mbedtls_mpi_uint,
                               A: *const mbedtls_mpi, b: mbedtls_mpi_sint)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_exp_mod(X: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                               E: *const mbedtls_mpi, N: *const mbedtls_mpi,
                               _RR: *mut mbedtls_mpi) -> ::libc::c_int;
    pub fn mbedtls_mpi_fill_random(X: *mut mbedtls_mpi, size: size_t,
                                   f_rng:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *mut ::libc::c_void,
                                                                           arg2:
                                                                               *mut ::libc::c_uchar,
                                                                           arg3:
                                                                               size_t)
                                                                 ->
                                                                     ::libc::c_int>,
                                   p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_mpi_gcd(G: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                           B: *const mbedtls_mpi) -> ::libc::c_int;
    pub fn mbedtls_mpi_inv_mod(X: *mut mbedtls_mpi, A: *const mbedtls_mpi,
                               N: *const mbedtls_mpi) -> ::libc::c_int;
    pub fn mbedtls_mpi_is_prime(X: *const mbedtls_mpi,
                                f_rng:
                                    ::std::option::Option<extern "C" fn(arg1:
                                                                            *mut ::libc::c_void,
                                                                        arg2:
                                                                            *mut ::libc::c_uchar,
                                                                        arg3:
                                                                            size_t)
                                                              ->
                                                                  ::libc::c_int>,
                                p_rng: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn mbedtls_mpi_gen_prime(X: *mut mbedtls_mpi, nbits: size_t,
                                 dh_flag: ::libc::c_int,
                                 f_rng:
                                     ::std::option::Option<extern "C" fn(arg1:
                                                                             *mut ::libc::c_void,
                                                                         arg2:
                                                                             *mut ::libc::c_uchar,
                                                                         arg3:
                                                                             size_t)
                                                               ->
                                                                   ::libc::c_int>,
                                 p_rng: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn mbedtls_mpi_self_test(verbose: ::libc::c_int) -> ::libc::c_int;
    pub fn mbedtls_ecp_curve_list() -> *const mbedtls_ecp_curve_info;
    pub fn mbedtls_ecp_grp_id_list() -> *const mbedtls_ecp_group_id;
    pub fn mbedtls_ecp_curve_info_from_grp_id(grp_id: mbedtls_ecp_group_id)
     -> *const mbedtls_ecp_curve_info;
    pub fn mbedtls_ecp_curve_info_from_tls_id(tls_id: uint16_t)
     -> *const mbedtls_ecp_curve_info;
    pub fn mbedtls_ecp_curve_info_from_name(name: *const ::libc::c_char)
     -> *const mbedtls_ecp_curve_info;
    pub fn mbedtls_ecp_point_init(pt: *mut mbedtls_ecp_point) -> ();
    pub fn mbedtls_ecp_group_init(grp: *mut mbedtls_ecp_group) -> ();
    pub fn mbedtls_ecp_keypair_init(key: *mut mbedtls_ecp_keypair) -> ();
    pub fn mbedtls_ecp_point_free(pt: *mut mbedtls_ecp_point) -> ();
    pub fn mbedtls_ecp_group_free(grp: *mut mbedtls_ecp_group) -> ();
    pub fn mbedtls_ecp_keypair_free(key: *mut mbedtls_ecp_keypair) -> ();
    pub fn mbedtls_ecp_copy(P: *mut mbedtls_ecp_point,
                            Q: *const mbedtls_ecp_point) -> ::libc::c_int;
    pub fn mbedtls_ecp_group_copy(dst: *mut mbedtls_ecp_group,
                                  src: *const mbedtls_ecp_group)
     -> ::libc::c_int;
    pub fn mbedtls_ecp_set_zero(pt: *mut mbedtls_ecp_point) -> ::libc::c_int;
    pub fn mbedtls_ecp_is_zero(pt: *mut mbedtls_ecp_point) -> ::libc::c_int;
    pub fn mbedtls_ecp_point_read_string(P: *mut mbedtls_ecp_point,
                                         radix: ::libc::c_int,
                                         x: *const ::libc::c_char,
                                         y: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_ecp_point_write_binary(grp: *const mbedtls_ecp_group,
                                          P: *const mbedtls_ecp_point,
                                          format: ::libc::c_int,
                                          olen: *mut size_t,
                                          buf: *mut ::libc::c_uchar,
                                          buflen: size_t) -> ::libc::c_int;
    pub fn mbedtls_ecp_point_read_binary(grp: *const mbedtls_ecp_group,
                                         P: *mut mbedtls_ecp_point,
                                         buf: *const ::libc::c_uchar,
                                         ilen: size_t) -> ::libc::c_int;
    pub fn mbedtls_ecp_tls_read_point(grp: *const mbedtls_ecp_group,
                                      pt: *mut mbedtls_ecp_point,
                                      buf: *mut *const ::libc::c_uchar,
                                      len: size_t) -> ::libc::c_int;
    pub fn mbedtls_ecp_tls_write_point(grp: *const mbedtls_ecp_group,
                                       pt: *const mbedtls_ecp_point,
                                       format: ::libc::c_int,
                                       olen: *mut size_t,
                                       buf: *mut ::libc::c_uchar,
                                       blen: size_t) -> ::libc::c_int;
    pub fn mbedtls_ecp_group_load(grp: *mut mbedtls_ecp_group,
                                  index: mbedtls_ecp_group_id)
     -> ::libc::c_int;
    pub fn mbedtls_ecp_tls_read_group(grp: *mut mbedtls_ecp_group,
                                      buf: *mut *const ::libc::c_uchar,
                                      len: size_t) -> ::libc::c_int;
    pub fn mbedtls_ecp_tls_write_group(grp: *const mbedtls_ecp_group,
                                       olen: *mut size_t,
                                       buf: *mut ::libc::c_uchar,
                                       blen: size_t) -> ::libc::c_int;
    pub fn mbedtls_ecp_mul(grp: *mut mbedtls_ecp_group,
                           R: *mut mbedtls_ecp_point, m: *const mbedtls_mpi,
                           P: *const mbedtls_ecp_point,
                           f_rng:
                               ::std::option::Option<extern "C" fn(arg1:
                                                                       *mut ::libc::c_void,
                                                                   arg2:
                                                                       *mut ::libc::c_uchar,
                                                                   arg3:
                                                                       size_t)
                                                         -> ::libc::c_int>,
                           p_rng: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn mbedtls_ecp_muladd(grp: *mut mbedtls_ecp_group,
                              R: *mut mbedtls_ecp_point,
                              m: *const mbedtls_mpi,
                              P: *const mbedtls_ecp_point,
                              n: *const mbedtls_mpi,
                              Q: *const mbedtls_ecp_point) -> ::libc::c_int;
    pub fn mbedtls_ecp_check_pubkey(grp: *const mbedtls_ecp_group,
                                    pt: *const mbedtls_ecp_point)
     -> ::libc::c_int;
    pub fn mbedtls_ecp_check_privkey(grp: *const mbedtls_ecp_group,
                                     d: *const mbedtls_mpi) -> ::libc::c_int;
    pub fn mbedtls_ecp_gen_keypair(grp: *mut mbedtls_ecp_group,
                                   d: *mut mbedtls_mpi,
                                   Q: *mut mbedtls_ecp_point,
                                   f_rng:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *mut ::libc::c_void,
                                                                           arg2:
                                                                               *mut ::libc::c_uchar,
                                                                           arg3:
                                                                               size_t)
                                                                 ->
                                                                     ::libc::c_int>,
                                   p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_ecp_gen_key(grp_id: mbedtls_ecp_group_id,
                               key: *mut mbedtls_ecp_keypair,
                               f_rng:
                                   ::std::option::Option<extern "C" fn(arg1:
                                                                           *mut ::libc::c_void,
                                                                       arg2:
                                                                           *mut ::libc::c_uchar,
                                                                       arg3:
                                                                           size_t)
                                                             ->
                                                                 ::libc::c_int>,
                               p_rng: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn mbedtls_ecp_check_pub_priv(_pub: *const mbedtls_ecp_keypair,
                                      prv: *const mbedtls_ecp_keypair)
     -> ::libc::c_int;
    pub fn mbedtls_ecp_self_test(verbose: ::libc::c_int) -> ::libc::c_int;
    pub fn mbedtls_md_list() -> *const ::libc::c_int;
    pub fn mbedtls_md_info_from_string(md_name: *const ::libc::c_char)
     -> *const mbedtls_md_info_t;
    pub fn mbedtls_md_info_from_type(md_type: mbedtls_md_type_t)
     -> *const mbedtls_md_info_t;
    pub fn mbedtls_md_init(ctx: *mut mbedtls_md_context_t) -> ();
    pub fn mbedtls_md_free(ctx: *mut mbedtls_md_context_t) -> ();
    pub fn mbedtls_md_init_ctx(ctx: *mut mbedtls_md_context_t,
                               md_info: *const mbedtls_md_info_t)
     -> ::libc::c_int;
    pub fn mbedtls_md_setup(ctx: *mut mbedtls_md_context_t,
                            md_info: *const mbedtls_md_info_t,
                            hmac: ::libc::c_int) -> ::libc::c_int;
    pub fn mbedtls_md_clone(dst: *mut mbedtls_md_context_t,
                            src: *const mbedtls_md_context_t)
     -> ::libc::c_int;
    pub fn mbedtls_md_get_size(md_info: *const mbedtls_md_info_t)
     -> ::libc::c_uchar;
    pub fn mbedtls_md_get_type(md_info: *const mbedtls_md_info_t)
     -> mbedtls_md_type_t;
    pub fn mbedtls_md_get_name(md_info: *const mbedtls_md_info_t)
     -> *const ::libc::c_char;
    pub fn mbedtls_md_starts(ctx: *mut mbedtls_md_context_t) -> ::libc::c_int;
    pub fn mbedtls_md_update(ctx: *mut mbedtls_md_context_t,
                             input: *const ::libc::c_uchar, ilen: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_md_finish(ctx: *mut mbedtls_md_context_t,
                             output: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn mbedtls_md(md_info: *const mbedtls_md_info_t,
                      input: *const ::libc::c_uchar, ilen: size_t,
                      output: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn mbedtls_md_file(md_info: *const mbedtls_md_info_t,
                           path: *const ::libc::c_char,
                           output: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn mbedtls_md_hmac_starts(ctx: *mut mbedtls_md_context_t,
                                  key: *const ::libc::c_uchar, keylen: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_md_hmac_update(ctx: *mut mbedtls_md_context_t,
                                  input: *const ::libc::c_uchar, ilen: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_md_hmac_finish(ctx: *mut mbedtls_md_context_t,
                                  output: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_md_hmac_reset(ctx: *mut mbedtls_md_context_t)
     -> ::libc::c_int;
    pub fn mbedtls_md_hmac(md_info: *const mbedtls_md_info_t,
                           key: *const ::libc::c_uchar, keylen: size_t,
                           input: *const ::libc::c_uchar, ilen: size_t,
                           output: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn mbedtls_md_process(ctx: *mut mbedtls_md_context_t,
                              data: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn mbedtls_rsa_init(ctx: *mut mbedtls_rsa_context,
                            padding: ::libc::c_int, hash_id: ::libc::c_int)
     -> ();
    pub fn mbedtls_rsa_set_padding(ctx: *mut mbedtls_rsa_context,
                                   padding: ::libc::c_int,
                                   hash_id: ::libc::c_int) -> ();
    pub fn mbedtls_rsa_gen_key(ctx: *mut mbedtls_rsa_context,
                               f_rng:
                                   ::std::option::Option<extern "C" fn(arg1:
                                                                           *mut ::libc::c_void,
                                                                       arg2:
                                                                           *mut ::libc::c_uchar,
                                                                       arg3:
                                                                           size_t)
                                                             ->
                                                                 ::libc::c_int>,
                               p_rng: *mut ::libc::c_void,
                               nbits: ::libc::c_uint, exponent: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_check_pubkey(ctx: *const mbedtls_rsa_context)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_check_privkey(ctx: *const mbedtls_rsa_context)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_check_pub_priv(_pub: *const mbedtls_rsa_context,
                                      prv: *const mbedtls_rsa_context)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_public(ctx: *mut mbedtls_rsa_context,
                              input: *const ::libc::c_uchar,
                              output: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn mbedtls_rsa_private(ctx: *mut mbedtls_rsa_context,
                               f_rng:
                                   ::std::option::Option<extern "C" fn(arg1:
                                                                           *mut ::libc::c_void,
                                                                       arg2:
                                                                           *mut ::libc::c_uchar,
                                                                       arg3:
                                                                           size_t)
                                                             ->
                                                                 ::libc::c_int>,
                               p_rng: *mut ::libc::c_void,
                               input: *const ::libc::c_uchar,
                               output: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn mbedtls_rsa_pkcs1_encrypt(ctx: *mut mbedtls_rsa_context,
                                     f_rng:
                                         ::std::option::Option<extern "C" fn(arg1:
                                                                                 *mut ::libc::c_void,
                                                                             arg2:
                                                                                 *mut ::libc::c_uchar,
                                                                             arg3:
                                                                                 size_t)
                                                                   ->
                                                                       ::libc::c_int>,
                                     p_rng: *mut ::libc::c_void,
                                     mode: ::libc::c_int, ilen: size_t,
                                     input: *const ::libc::c_uchar,
                                     output: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_rsaes_pkcs1_v15_encrypt(ctx: *mut mbedtls_rsa_context,
                                               f_rng:
                                                   ::std::option::Option<extern "C" fn(arg1:
                                                                                           *mut ::libc::c_void,
                                                                                       arg2:
                                                                                           *mut ::libc::c_uchar,
                                                                                       arg3:
                                                                                           size_t)
                                                                             ->
                                                                                 ::libc::c_int>,
                                               p_rng: *mut ::libc::c_void,
                                               mode: ::libc::c_int,
                                               ilen: size_t,
                                               input: *const ::libc::c_uchar,
                                               output: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_rsaes_oaep_encrypt(ctx: *mut mbedtls_rsa_context,
                                          f_rng:
                                              ::std::option::Option<extern "C" fn(arg1:
                                                                                      *mut ::libc::c_void,
                                                                                  arg2:
                                                                                      *mut ::libc::c_uchar,
                                                                                  arg3:
                                                                                      size_t)
                                                                        ->
                                                                            ::libc::c_int>,
                                          p_rng: *mut ::libc::c_void,
                                          mode: ::libc::c_int,
                                          label: *const ::libc::c_uchar,
                                          label_len: size_t, ilen: size_t,
                                          input: *const ::libc::c_uchar,
                                          output: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_pkcs1_decrypt(ctx: *mut mbedtls_rsa_context,
                                     f_rng:
                                         ::std::option::Option<extern "C" fn(arg1:
                                                                                 *mut ::libc::c_void,
                                                                             arg2:
                                                                                 *mut ::libc::c_uchar,
                                                                             arg3:
                                                                                 size_t)
                                                                   ->
                                                                       ::libc::c_int>,
                                     p_rng: *mut ::libc::c_void,
                                     mode: ::libc::c_int, olen: *mut size_t,
                                     input: *const ::libc::c_uchar,
                                     output: *mut ::libc::c_uchar,
                                     output_max_len: size_t) -> ::libc::c_int;
    pub fn mbedtls_rsa_rsaes_pkcs1_v15_decrypt(ctx: *mut mbedtls_rsa_context,
                                               f_rng:
                                                   ::std::option::Option<extern "C" fn(arg1:
                                                                                           *mut ::libc::c_void,
                                                                                       arg2:
                                                                                           *mut ::libc::c_uchar,
                                                                                       arg3:
                                                                                           size_t)
                                                                             ->
                                                                                 ::libc::c_int>,
                                               p_rng: *mut ::libc::c_void,
                                               mode: ::libc::c_int,
                                               olen: *mut size_t,
                                               input: *const ::libc::c_uchar,
                                               output: *mut ::libc::c_uchar,
                                               output_max_len: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_rsaes_oaep_decrypt(ctx: *mut mbedtls_rsa_context,
                                          f_rng:
                                              ::std::option::Option<extern "C" fn(arg1:
                                                                                      *mut ::libc::c_void,
                                                                                  arg2:
                                                                                      *mut ::libc::c_uchar,
                                                                                  arg3:
                                                                                      size_t)
                                                                        ->
                                                                            ::libc::c_int>,
                                          p_rng: *mut ::libc::c_void,
                                          mode: ::libc::c_int,
                                          label: *const ::libc::c_uchar,
                                          label_len: size_t,
                                          olen: *mut size_t,
                                          input: *const ::libc::c_uchar,
                                          output: *mut ::libc::c_uchar,
                                          output_max_len: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_pkcs1_sign(ctx: *mut mbedtls_rsa_context,
                                  f_rng:
                                      ::std::option::Option<extern "C" fn(arg1:
                                                                              *mut ::libc::c_void,
                                                                          arg2:
                                                                              *mut ::libc::c_uchar,
                                                                          arg3:
                                                                              size_t)
                                                                ->
                                                                    ::libc::c_int>,
                                  p_rng: *mut ::libc::c_void,
                                  mode: ::libc::c_int,
                                  md_alg: mbedtls_md_type_t,
                                  hashlen: ::libc::c_uint,
                                  hash: *const ::libc::c_uchar,
                                  sig: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn mbedtls_rsa_rsassa_pkcs1_v15_sign(ctx: *mut mbedtls_rsa_context,
                                             f_rng:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         *mut ::libc::c_void,
                                                                                     arg2:
                                                                                         *mut ::libc::c_uchar,
                                                                                     arg3:
                                                                                         size_t)
                                                                           ->
                                                                               ::libc::c_int>,
                                             p_rng: *mut ::libc::c_void,
                                             mode: ::libc::c_int,
                                             md_alg: mbedtls_md_type_t,
                                             hashlen: ::libc::c_uint,
                                             hash: *const ::libc::c_uchar,
                                             sig: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_rsassa_pss_sign(ctx: *mut mbedtls_rsa_context,
                                       f_rng:
                                           ::std::option::Option<extern "C" fn(arg1:
                                                                                   *mut ::libc::c_void,
                                                                               arg2:
                                                                                   *mut ::libc::c_uchar,
                                                                               arg3:
                                                                                   size_t)
                                                                     ->
                                                                         ::libc::c_int>,
                                       p_rng: *mut ::libc::c_void,
                                       mode: ::libc::c_int,
                                       md_alg: mbedtls_md_type_t,
                                       hashlen: ::libc::c_uint,
                                       hash: *const ::libc::c_uchar,
                                       sig: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_pkcs1_verify(ctx: *mut mbedtls_rsa_context,
                                    f_rng:
                                        ::std::option::Option<extern "C" fn(arg1:
                                                                                *mut ::libc::c_void,
                                                                            arg2:
                                                                                *mut ::libc::c_uchar,
                                                                            arg3:
                                                                                size_t)
                                                                  ->
                                                                      ::libc::c_int>,
                                    p_rng: *mut ::libc::c_void,
                                    mode: ::libc::c_int,
                                    md_alg: mbedtls_md_type_t,
                                    hashlen: ::libc::c_uint,
                                    hash: *const ::libc::c_uchar,
                                    sig: *const ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_rsassa_pkcs1_v15_verify(ctx: *mut mbedtls_rsa_context,
                                               f_rng:
                                                   ::std::option::Option<extern "C" fn(arg1:
                                                                                           *mut ::libc::c_void,
                                                                                       arg2:
                                                                                           *mut ::libc::c_uchar,
                                                                                       arg3:
                                                                                           size_t)
                                                                             ->
                                                                                 ::libc::c_int>,
                                               p_rng: *mut ::libc::c_void,
                                               mode: ::libc::c_int,
                                               md_alg: mbedtls_md_type_t,
                                               hashlen: ::libc::c_uint,
                                               hash: *const ::libc::c_uchar,
                                               sig: *const ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_rsassa_pss_verify(ctx: *mut mbedtls_rsa_context,
                                         f_rng:
                                             ::std::option::Option<extern "C" fn(arg1:
                                                                                     *mut ::libc::c_void,
                                                                                 arg2:
                                                                                     *mut ::libc::c_uchar,
                                                                                 arg3:
                                                                                     size_t)
                                                                       ->
                                                                           ::libc::c_int>,
                                         p_rng: *mut ::libc::c_void,
                                         mode: ::libc::c_int,
                                         md_alg: mbedtls_md_type_t,
                                         hashlen: ::libc::c_uint,
                                         hash: *const ::libc::c_uchar,
                                         sig: *const ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_rsassa_pss_verify_ext(ctx: *mut mbedtls_rsa_context,
                                             f_rng:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         *mut ::libc::c_void,
                                                                                     arg2:
                                                                                         *mut ::libc::c_uchar,
                                                                                     arg3:
                                                                                         size_t)
                                                                           ->
                                                                               ::libc::c_int>,
                                             p_rng: *mut ::libc::c_void,
                                             mode: ::libc::c_int,
                                             md_alg: mbedtls_md_type_t,
                                             hashlen: ::libc::c_uint,
                                             hash: *const ::libc::c_uchar,
                                             mgf1_hash_id: mbedtls_md_type_t,
                                             expected_salt_len: ::libc::c_int,
                                             sig: *const ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_rsa_copy(dst: *mut mbedtls_rsa_context,
                            src: *const mbedtls_rsa_context) -> ::libc::c_int;
    pub fn mbedtls_rsa_free(ctx: *mut mbedtls_rsa_context) -> ();
    pub fn mbedtls_rsa_self_test(verbose: ::libc::c_int) -> ::libc::c_int;
    pub fn mbedtls_ecdsa_sign(grp: *mut mbedtls_ecp_group,
                              r: *mut mbedtls_mpi, s: *mut mbedtls_mpi,
                              d: *const mbedtls_mpi,
                              buf: *const ::libc::c_uchar, blen: size_t,
                              f_rng:
                                  ::std::option::Option<extern "C" fn(arg1:
                                                                          *mut ::libc::c_void,
                                                                      arg2:
                                                                          *mut ::libc::c_uchar,
                                                                      arg3:
                                                                          size_t)
                                                            -> ::libc::c_int>,
                              p_rng: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn mbedtls_ecdsa_sign_det(grp: *mut mbedtls_ecp_group,
                                  r: *mut mbedtls_mpi, s: *mut mbedtls_mpi,
                                  d: *const mbedtls_mpi,
                                  buf: *const ::libc::c_uchar, blen: size_t,
                                  md_alg: mbedtls_md_type_t) -> ::libc::c_int;
    pub fn mbedtls_ecdsa_verify(grp: *mut mbedtls_ecp_group,
                                buf: *const ::libc::c_uchar, blen: size_t,
                                Q: *const mbedtls_ecp_point,
                                r: *const mbedtls_mpi, s: *const mbedtls_mpi)
     -> ::libc::c_int;
    pub fn mbedtls_ecdsa_write_signature(ctx: *mut mbedtls_ecdsa_context,
                                         md_alg: mbedtls_md_type_t,
                                         hash: *const ::libc::c_uchar,
                                         hlen: size_t,
                                         sig: *mut ::libc::c_uchar,
                                         slen: *mut size_t,
                                         f_rng:
                                             ::std::option::Option<extern "C" fn(arg1:
                                                                                     *mut ::libc::c_void,
                                                                                 arg2:
                                                                                     *mut ::libc::c_uchar,
                                                                                 arg3:
                                                                                     size_t)
                                                                       ->
                                                                           ::libc::c_int>,
                                         p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_ecdsa_write_signature_det(ctx: *mut mbedtls_ecdsa_context,
                                             hash: *const ::libc::c_uchar,
                                             hlen: size_t,
                                             sig: *mut ::libc::c_uchar,
                                             slen: *mut size_t,
                                             md_alg: mbedtls_md_type_t)
     -> ::libc::c_int;
    pub fn mbedtls_ecdsa_read_signature(ctx: *mut mbedtls_ecdsa_context,
                                        hash: *const ::libc::c_uchar,
                                        hlen: size_t,
                                        sig: *const ::libc::c_uchar,
                                        slen: size_t) -> ::libc::c_int;
    pub fn mbedtls_ecdsa_genkey(ctx: *mut mbedtls_ecdsa_context,
                                gid: mbedtls_ecp_group_id,
                                f_rng:
                                    ::std::option::Option<extern "C" fn(arg1:
                                                                            *mut ::libc::c_void,
                                                                        arg2:
                                                                            *mut ::libc::c_uchar,
                                                                        arg3:
                                                                            size_t)
                                                              ->
                                                                  ::libc::c_int>,
                                p_rng: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn mbedtls_ecdsa_from_keypair(ctx: *mut mbedtls_ecdsa_context,
                                      key: *const mbedtls_ecp_keypair)
     -> ::libc::c_int;
    pub fn mbedtls_ecdsa_init(ctx: *mut mbedtls_ecdsa_context) -> ();
    pub fn mbedtls_ecdsa_free(ctx: *mut mbedtls_ecdsa_context) -> ();
    pub fn mbedtls_pk_info_from_type(pk_type: mbedtls_pk_type_t)
     -> *const mbedtls_pk_info_t;
    pub fn mbedtls_pk_init(ctx: *mut mbedtls_pk_context) -> ();
    pub fn mbedtls_pk_free(ctx: *mut mbedtls_pk_context) -> ();
    pub fn mbedtls_pk_setup(ctx: *mut mbedtls_pk_context,
                            info: *const mbedtls_pk_info_t) -> ::libc::c_int;
    pub fn mbedtls_pk_setup_rsa_alt(ctx: *mut mbedtls_pk_context,
                                    key: *mut ::libc::c_void,
                                    decrypt_func:
                                        mbedtls_pk_rsa_alt_decrypt_func,
                                    sign_func: mbedtls_pk_rsa_alt_sign_func,
                                    key_len_func:
                                        mbedtls_pk_rsa_alt_key_len_func)
     -> ::libc::c_int;
    pub fn mbedtls_pk_get_bitlen(ctx: *const mbedtls_pk_context) -> size_t;
    pub fn mbedtls_pk_can_do(ctx: *const mbedtls_pk_context,
                             _type: mbedtls_pk_type_t) -> ::libc::c_int;
    pub fn mbedtls_pk_verify(ctx: *mut mbedtls_pk_context,
                             md_alg: mbedtls_md_type_t,
                             hash: *const ::libc::c_uchar, hash_len: size_t,
                             sig: *const ::libc::c_uchar, sig_len: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_pk_verify_ext(_type: mbedtls_pk_type_t,
                                 options: *const ::libc::c_void,
                                 ctx: *mut mbedtls_pk_context,
                                 md_alg: mbedtls_md_type_t,
                                 hash: *const ::libc::c_uchar,
                                 hash_len: size_t,
                                 sig: *const ::libc::c_uchar, sig_len: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_pk_sign(ctx: *mut mbedtls_pk_context,
                           md_alg: mbedtls_md_type_t,
                           hash: *const ::libc::c_uchar, hash_len: size_t,
                           sig: *mut ::libc::c_uchar, sig_len: *mut size_t,
                           f_rng:
                               ::std::option::Option<extern "C" fn(arg1:
                                                                       *mut ::libc::c_void,
                                                                   arg2:
                                                                       *mut ::libc::c_uchar,
                                                                   arg3:
                                                                       size_t)
                                                         -> ::libc::c_int>,
                           p_rng: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn mbedtls_pk_decrypt(ctx: *mut mbedtls_pk_context,
                              input: *const ::libc::c_uchar, ilen: size_t,
                              output: *mut ::libc::c_uchar, olen: *mut size_t,
                              osize: size_t,
                              f_rng:
                                  ::std::option::Option<extern "C" fn(arg1:
                                                                          *mut ::libc::c_void,
                                                                      arg2:
                                                                          *mut ::libc::c_uchar,
                                                                      arg3:
                                                                          size_t)
                                                            -> ::libc::c_int>,
                              p_rng: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn mbedtls_pk_encrypt(ctx: *mut mbedtls_pk_context,
                              input: *const ::libc::c_uchar, ilen: size_t,
                              output: *mut ::libc::c_uchar, olen: *mut size_t,
                              osize: size_t,
                              f_rng:
                                  ::std::option::Option<extern "C" fn(arg1:
                                                                          *mut ::libc::c_void,
                                                                      arg2:
                                                                          *mut ::libc::c_uchar,
                                                                      arg3:
                                                                          size_t)
                                                            -> ::libc::c_int>,
                              p_rng: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn mbedtls_pk_check_pair(_pub: *const mbedtls_pk_context,
                                 prv: *const mbedtls_pk_context)
     -> ::libc::c_int;
    pub fn mbedtls_pk_debug(ctx: *const mbedtls_pk_context,
                            items: *mut mbedtls_pk_debug_item)
     -> ::libc::c_int;
    pub fn mbedtls_pk_get_name(ctx: *const mbedtls_pk_context)
     -> *const ::libc::c_char;
    pub fn mbedtls_pk_get_type(ctx: *const mbedtls_pk_context)
     -> mbedtls_pk_type_t;
    pub fn mbedtls_pk_parse_key(ctx: *mut mbedtls_pk_context,
                                key: *const ::libc::c_uchar, keylen: size_t,
                                pwd: *const ::libc::c_uchar, pwdlen: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_pk_parse_public_key(ctx: *mut mbedtls_pk_context,
                                       key: *const ::libc::c_uchar,
                                       keylen: size_t) -> ::libc::c_int;
    pub fn mbedtls_pk_parse_keyfile(ctx: *mut mbedtls_pk_context,
                                    path: *const ::libc::c_char,
                                    password: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_pk_parse_public_keyfile(ctx: *mut mbedtls_pk_context,
                                           path: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_pk_write_key_der(ctx: *mut mbedtls_pk_context,
                                    buf: *mut ::libc::c_uchar, size: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_pk_write_pubkey_der(ctx: *mut mbedtls_pk_context,
                                       buf: *mut ::libc::c_uchar,
                                       size: size_t) -> ::libc::c_int;
    pub fn mbedtls_pk_write_pubkey_pem(ctx: *mut mbedtls_pk_context,
                                       buf: *mut ::libc::c_uchar,
                                       size: size_t) -> ::libc::c_int;
    pub fn mbedtls_pk_write_key_pem(ctx: *mut mbedtls_pk_context,
                                    buf: *mut ::libc::c_uchar, size: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_pk_parse_subpubkey(p: *mut *mut ::libc::c_uchar,
                                      end: *const ::libc::c_uchar,
                                      pk: *mut mbedtls_pk_context)
     -> ::libc::c_int;
    pub fn mbedtls_pk_write_pubkey(p: *mut *mut ::libc::c_uchar,
                                   start: *mut ::libc::c_uchar,
                                   key: *const mbedtls_pk_context)
     -> ::libc::c_int;
    pub fn mbedtls_pk_load_file(path: *const ::libc::c_char,
                                buf: *mut *mut ::libc::c_uchar,
                                n: *mut size_t) -> ::libc::c_int;
    pub fn mbedtls_cipher_list() -> *const ::libc::c_int;
    pub fn mbedtls_cipher_info_from_string(cipher_name: *const ::libc::c_char)
     -> *const mbedtls_cipher_info_t;
    pub fn mbedtls_cipher_info_from_type(cipher_type: mbedtls_cipher_type_t)
     -> *const mbedtls_cipher_info_t;
    pub fn mbedtls_cipher_info_from_values(cipher_id: mbedtls_cipher_id_t,
                                           key_bitlen: ::libc::c_int,
                                           mode: mbedtls_cipher_mode_t)
     -> *const mbedtls_cipher_info_t;
    pub fn mbedtls_cipher_init(ctx: *mut mbedtls_cipher_context_t) -> ();
    pub fn mbedtls_cipher_free(ctx: *mut mbedtls_cipher_context_t) -> ();
    pub fn mbedtls_cipher_setup(ctx: *mut mbedtls_cipher_context_t,
                                cipher_info: *const mbedtls_cipher_info_t)
     -> ::libc::c_int;
    pub fn mbedtls_cipher_setkey(ctx: *mut mbedtls_cipher_context_t,
                                 key: *const ::libc::c_uchar,
                                 key_bitlen: ::libc::c_int,
                                 operation: mbedtls_operation_t)
     -> ::libc::c_int;
    pub fn mbedtls_cipher_set_padding_mode(ctx: *mut mbedtls_cipher_context_t,
                                           mode: mbedtls_cipher_padding_t)
     -> ::libc::c_int;
    pub fn mbedtls_cipher_set_iv(ctx: *mut mbedtls_cipher_context_t,
                                 iv: *const ::libc::c_uchar, iv_len: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_cipher_reset(ctx: *mut mbedtls_cipher_context_t)
     -> ::libc::c_int;
    pub fn mbedtls_cipher_update_ad(ctx: *mut mbedtls_cipher_context_t,
                                    ad: *const ::libc::c_uchar,
                                    ad_len: size_t) -> ::libc::c_int;
    pub fn mbedtls_cipher_update(ctx: *mut mbedtls_cipher_context_t,
                                 input: *const ::libc::c_uchar, ilen: size_t,
                                 output: *mut ::libc::c_uchar,
                                 olen: *mut size_t) -> ::libc::c_int;
    pub fn mbedtls_cipher_finish(ctx: *mut mbedtls_cipher_context_t,
                                 output: *mut ::libc::c_uchar,
                                 olen: *mut size_t) -> ::libc::c_int;
    pub fn mbedtls_cipher_write_tag(ctx: *mut mbedtls_cipher_context_t,
                                    tag: *mut ::libc::c_uchar,
                                    tag_len: size_t) -> ::libc::c_int;
    pub fn mbedtls_cipher_check_tag(ctx: *mut mbedtls_cipher_context_t,
                                    tag: *const ::libc::c_uchar,
                                    tag_len: size_t) -> ::libc::c_int;
    pub fn mbedtls_cipher_crypt(ctx: *mut mbedtls_cipher_context_t,
                                iv: *const ::libc::c_uchar, iv_len: size_t,
                                input: *const ::libc::c_uchar, ilen: size_t,
                                output: *mut ::libc::c_uchar,
                                olen: *mut size_t) -> ::libc::c_int;
    pub fn mbedtls_cipher_auth_encrypt(ctx: *mut mbedtls_cipher_context_t,
                                       iv: *const ::libc::c_uchar,
                                       iv_len: size_t,
                                       ad: *const ::libc::c_uchar,
                                       ad_len: size_t,
                                       input: *const ::libc::c_uchar,
                                       ilen: size_t,
                                       output: *mut ::libc::c_uchar,
                                       olen: *mut size_t,
                                       tag: *mut ::libc::c_uchar,
                                       tag_len: size_t) -> ::libc::c_int;
    pub fn mbedtls_cipher_auth_decrypt(ctx: *mut mbedtls_cipher_context_t,
                                       iv: *const ::libc::c_uchar,
                                       iv_len: size_t,
                                       ad: *const ::libc::c_uchar,
                                       ad_len: size_t,
                                       input: *const ::libc::c_uchar,
                                       ilen: size_t,
                                       output: *mut ::libc::c_uchar,
                                       olen: *mut size_t,
                                       tag: *const ::libc::c_uchar,
                                       tag_len: size_t) -> ::libc::c_int;
    pub fn mbedtls_ssl_list_ciphersuites() -> *const ::libc::c_int;
    pub fn mbedtls_ssl_ciphersuite_from_string(ciphersuite_name:
                                                   *const ::libc::c_char)
     -> *const mbedtls_ssl_ciphersuite_t;
    pub fn mbedtls_ssl_ciphersuite_from_id(ciphersuite_id: ::libc::c_int)
     -> *const mbedtls_ssl_ciphersuite_t;
    pub fn mbedtls_ssl_get_ciphersuite_sig_pk_alg(info:
                                                      *const mbedtls_ssl_ciphersuite_t)
     -> mbedtls_pk_type_t;
    pub fn mbedtls_ssl_ciphersuite_uses_ec(info:
                                               *const mbedtls_ssl_ciphersuite_t)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_ciphersuite_uses_psk(info:
                                                *const mbedtls_ssl_ciphersuite_t)
     -> ::libc::c_int;
    pub fn mbedtls_asn1_get_len(p: *mut *mut ::libc::c_uchar,
                                end: *const ::libc::c_uchar, len: *mut size_t)
     -> ::libc::c_int;
    pub fn mbedtls_asn1_get_tag(p: *mut *mut ::libc::c_uchar,
                                end: *const ::libc::c_uchar, len: *mut size_t,
                                tag: ::libc::c_int) -> ::libc::c_int;
    pub fn mbedtls_asn1_get_bool(p: *mut *mut ::libc::c_uchar,
                                 end: *const ::libc::c_uchar,
                                 val: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn mbedtls_asn1_get_int(p: *mut *mut ::libc::c_uchar,
                                end: *const ::libc::c_uchar,
                                val: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn mbedtls_asn1_get_bitstring(p: *mut *mut ::libc::c_uchar,
                                      end: *const ::libc::c_uchar,
                                      bs: *mut mbedtls_asn1_bitstring)
     -> ::libc::c_int;
    pub fn mbedtls_asn1_get_bitstring_null(p: *mut *mut ::libc::c_uchar,
                                           end: *const ::libc::c_uchar,
                                           len: *mut size_t) -> ::libc::c_int;
    pub fn mbedtls_asn1_get_sequence_of(p: *mut *mut ::libc::c_uchar,
                                        end: *const ::libc::c_uchar,
                                        cur: *mut mbedtls_asn1_sequence,
                                        tag: ::libc::c_int) -> ::libc::c_int;
    pub fn mbedtls_asn1_get_mpi(p: *mut *mut ::libc::c_uchar,
                                end: *const ::libc::c_uchar,
                                X: *mut mbedtls_mpi) -> ::libc::c_int;
    pub fn mbedtls_asn1_get_alg(p: *mut *mut ::libc::c_uchar,
                                end: *const ::libc::c_uchar,
                                alg: *mut mbedtls_asn1_buf,
                                params: *mut mbedtls_asn1_buf)
     -> ::libc::c_int;
    pub fn mbedtls_asn1_get_alg_null(p: *mut *mut ::libc::c_uchar,
                                     end: *const ::libc::c_uchar,
                                     alg: *mut mbedtls_asn1_buf)
     -> ::libc::c_int;
    pub fn mbedtls_asn1_find_named_data(list: *mut mbedtls_asn1_named_data,
                                        oid: *const ::libc::c_char,
                                        len: size_t)
     -> *mut mbedtls_asn1_named_data;
    pub fn mbedtls_asn1_free_named_data(entry: *mut mbedtls_asn1_named_data)
     -> ();
    pub fn mbedtls_asn1_free_named_data_list(head:
                                                 *mut *mut mbedtls_asn1_named_data)
     -> ();
    pub fn mbedtls_x509_dn_gets(buf: *mut ::libc::c_char, size: size_t,
                                dn: *const mbedtls_x509_name)
     -> ::libc::c_int;
    pub fn mbedtls_x509_serial_gets(buf: *mut ::libc::c_char, size: size_t,
                                    serial: *const mbedtls_x509_buf)
     -> ::libc::c_int;
    pub fn mbedtls_x509_time_is_past(time: *const mbedtls_x509_time)
     -> ::libc::c_int;
    pub fn mbedtls_x509_time_is_future(time: *const mbedtls_x509_time)
     -> ::libc::c_int;
    pub fn mbedtls_x509_self_test(verbose: ::libc::c_int) -> ::libc::c_int;
    pub fn mbedtls_x509_get_name(p: *mut *mut ::libc::c_uchar,
                                 end: *const ::libc::c_uchar,
                                 cur: *mut mbedtls_x509_name)
     -> ::libc::c_int;
    pub fn mbedtls_x509_get_alg_null(p: *mut *mut ::libc::c_uchar,
                                     end: *const ::libc::c_uchar,
                                     alg: *mut mbedtls_x509_buf)
     -> ::libc::c_int;
    pub fn mbedtls_x509_get_alg(p: *mut *mut ::libc::c_uchar,
                                end: *const ::libc::c_uchar,
                                alg: *mut mbedtls_x509_buf,
                                params: *mut mbedtls_x509_buf)
     -> ::libc::c_int;
    pub fn mbedtls_x509_get_rsassa_pss_params(params: *const mbedtls_x509_buf,
                                              md_alg: *mut mbedtls_md_type_t,
                                              mgf_md: *mut mbedtls_md_type_t,
                                              salt_len: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn mbedtls_x509_get_sig(p: *mut *mut ::libc::c_uchar,
                                end: *const ::libc::c_uchar,
                                sig: *mut mbedtls_x509_buf) -> ::libc::c_int;
    pub fn mbedtls_x509_get_sig_alg(sig_oid: *const mbedtls_x509_buf,
                                    sig_params: *const mbedtls_x509_buf,
                                    md_alg: *mut mbedtls_md_type_t,
                                    pk_alg: *mut mbedtls_pk_type_t,
                                    sig_opts: *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_x509_get_time(p: *mut *mut ::libc::c_uchar,
                                 end: *const ::libc::c_uchar,
                                 time: *mut mbedtls_x509_time)
     -> ::libc::c_int;
    pub fn mbedtls_x509_get_serial(p: *mut *mut ::libc::c_uchar,
                                   end: *const ::libc::c_uchar,
                                   serial: *mut mbedtls_x509_buf)
     -> ::libc::c_int;
    pub fn mbedtls_x509_get_ext(p: *mut *mut ::libc::c_uchar,
                                end: *const ::libc::c_uchar,
                                ext: *mut mbedtls_x509_buf,
                                tag: ::libc::c_int) -> ::libc::c_int;
    pub fn mbedtls_x509_sig_alg_gets(buf: *mut ::libc::c_char, size: size_t,
                                     sig_oid: *const mbedtls_x509_buf,
                                     pk_alg: mbedtls_pk_type_t,
                                     md_alg: mbedtls_md_type_t,
                                     sig_opts: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_x509_key_size_helper(buf: *mut ::libc::c_char,
                                        buf_size: size_t,
                                        name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_x509_string_to_names(head:
                                            *mut *mut mbedtls_asn1_named_data,
                                        name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_x509_set_extension(head: *mut *mut mbedtls_asn1_named_data,
                                      oid: *const ::libc::c_char,
                                      oid_len: size_t,
                                      critical: ::libc::c_int,
                                      val: *const ::libc::c_uchar,
                                      val_len: size_t) -> ::libc::c_int;
    pub fn mbedtls_x509_write_extensions(p: *mut *mut ::libc::c_uchar,
                                         start: *mut ::libc::c_uchar,
                                         first: *mut mbedtls_asn1_named_data)
     -> ::libc::c_int;
    pub fn mbedtls_x509_write_names(p: *mut *mut ::libc::c_uchar,
                                    start: *mut ::libc::c_uchar,
                                    first: *mut mbedtls_asn1_named_data)
     -> ::libc::c_int;
    pub fn mbedtls_x509_write_sig(p: *mut *mut ::libc::c_uchar,
                                  start: *mut ::libc::c_uchar,
                                  oid: *const ::libc::c_char, oid_len: size_t,
                                  sig: *mut ::libc::c_uchar, size: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crl_parse_der(chain: *mut mbedtls_x509_crl,
                                      buf: *const ::libc::c_uchar,
                                      buflen: size_t) -> ::libc::c_int;
    pub fn mbedtls_x509_crl_parse(chain: *mut mbedtls_x509_crl,
                                  buf: *const ::libc::c_uchar, buflen: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crl_parse_file(chain: *mut mbedtls_x509_crl,
                                       path: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crl_info(buf: *mut ::libc::c_char, size: size_t,
                                 prefix: *const ::libc::c_char,
                                 crl: *const mbedtls_x509_crl)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crl_init(crl: *mut mbedtls_x509_crl) -> ();
    pub fn mbedtls_x509_crl_free(crl: *mut mbedtls_x509_crl) -> ();
    pub fn mbedtls_x509_crt_parse_der(chain: *mut mbedtls_x509_crt,
                                      buf: *const ::libc::c_uchar,
                                      buflen: size_t) -> ::libc::c_int;
    pub fn mbedtls_x509_crt_parse(chain: *mut mbedtls_x509_crt,
                                  buf: *const ::libc::c_uchar, buflen: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crt_parse_file(chain: *mut mbedtls_x509_crt,
                                       path: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crt_parse_path(chain: *mut mbedtls_x509_crt,
                                       path: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crt_info(buf: *mut ::libc::c_char, size: size_t,
                                 prefix: *const ::libc::c_char,
                                 crt: *const mbedtls_x509_crt)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crt_verify_info(buf: *mut ::libc::c_char,
                                        size: size_t,
                                        prefix: *const ::libc::c_char,
                                        flags: uint32_t) -> ::libc::c_int;
    pub fn mbedtls_x509_crt_verify(crt: *mut mbedtls_x509_crt,
                                   trust_ca: *mut mbedtls_x509_crt,
                                   ca_crl: *mut mbedtls_x509_crl,
                                   cn: *const ::libc::c_char,
                                   flags: *mut uint32_t,
                                   f_vrfy:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *mut ::libc::c_void,
                                                                           arg2:
                                                                               *mut mbedtls_x509_crt,
                                                                           arg3:
                                                                               ::libc::c_int,
                                                                           arg4:
                                                                               *mut uint32_t)
                                                                 ->
                                                                     ::libc::c_int>,
                                   p_vrfy: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crt_verify_with_profile(crt: *mut mbedtls_x509_crt,
                                                trust_ca:
                                                    *mut mbedtls_x509_crt,
                                                ca_crl: *mut mbedtls_x509_crl,
                                                profile:
                                                    *const mbedtls_x509_crt_profile,
                                                cn: *const ::libc::c_char,
                                                flags: *mut uint32_t,
                                                f_vrfy:
                                                    ::std::option::Option<extern "C" fn(arg1:
                                                                                            *mut ::libc::c_void,
                                                                                        arg2:
                                                                                            *mut mbedtls_x509_crt,
                                                                                        arg3:
                                                                                            ::libc::c_int,
                                                                                        arg4:
                                                                                            *mut uint32_t)
                                                                              ->
                                                                                  ::libc::c_int>,
                                                p_vrfy: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crt_check_key_usage(crt: *const mbedtls_x509_crt,
                                            usage: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crt_check_extended_key_usage(crt:
                                                         *const mbedtls_x509_crt,
                                                     usage_oid:
                                                         *const ::libc::c_char,
                                                     usage_len: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crt_is_revoked(crt: *const mbedtls_x509_crt,
                                       crl: *const mbedtls_x509_crl)
     -> ::libc::c_int;
    pub fn mbedtls_x509_crt_init(crt: *mut mbedtls_x509_crt) -> ();
    pub fn mbedtls_x509_crt_free(crt: *mut mbedtls_x509_crt) -> ();
    pub fn mbedtls_x509write_crt_init(ctx: *mut mbedtls_x509write_cert) -> ();
    pub fn mbedtls_x509write_crt_set_version(ctx: *mut mbedtls_x509write_cert,
                                             version: ::libc::c_int) -> ();
    pub fn mbedtls_x509write_crt_set_serial(ctx: *mut mbedtls_x509write_cert,
                                            serial: *const mbedtls_mpi)
     -> ::libc::c_int;
    pub fn mbedtls_x509write_crt_set_validity(ctx:
                                                  *mut mbedtls_x509write_cert,
                                              not_before:
                                                  *const ::libc::c_char,
                                              not_after:
                                                  *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_x509write_crt_set_issuer_name(ctx:
                                                     *mut mbedtls_x509write_cert,
                                                 issuer_name:
                                                     *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_x509write_crt_set_subject_name(ctx:
                                                      *mut mbedtls_x509write_cert,
                                                  subject_name:
                                                      *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_x509write_crt_set_subject_key(ctx:
                                                     *mut mbedtls_x509write_cert,
                                                 key: *mut mbedtls_pk_context)
     -> ();
    pub fn mbedtls_x509write_crt_set_issuer_key(ctx:
                                                    *mut mbedtls_x509write_cert,
                                                key: *mut mbedtls_pk_context)
     -> ();
    pub fn mbedtls_x509write_crt_set_md_alg(ctx: *mut mbedtls_x509write_cert,
                                            md_alg: mbedtls_md_type_t) -> ();
    pub fn mbedtls_x509write_crt_set_extension(ctx:
                                                   *mut mbedtls_x509write_cert,
                                               oid: *const ::libc::c_char,
                                               oid_len: size_t,
                                               critical: ::libc::c_int,
                                               val: *const ::libc::c_uchar,
                                               val_len: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_x509write_crt_set_basic_constraints(ctx:
                                                           *mut mbedtls_x509write_cert,
                                                       is_ca: ::libc::c_int,
                                                       max_pathlen:
                                                           ::libc::c_int)
     -> ::libc::c_int;
    pub fn mbedtls_x509write_crt_set_subject_key_identifier(ctx:
                                                                *mut mbedtls_x509write_cert)
     -> ::libc::c_int;
    pub fn mbedtls_x509write_crt_set_authority_key_identifier(ctx:
                                                                  *mut mbedtls_x509write_cert)
     -> ::libc::c_int;
    pub fn mbedtls_x509write_crt_set_key_usage(ctx:
                                                   *mut mbedtls_x509write_cert,
                                               key_usage: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn mbedtls_x509write_crt_set_ns_cert_type(ctx:
                                                      *mut mbedtls_x509write_cert,
                                                  ns_cert_type:
                                                      ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_x509write_crt_free(ctx: *mut mbedtls_x509write_cert) -> ();
    pub fn mbedtls_x509write_crt_der(ctx: *mut mbedtls_x509write_cert,
                                     buf: *mut ::libc::c_uchar, size: size_t,
                                     f_rng:
                                         ::std::option::Option<extern "C" fn(arg1:
                                                                                 *mut ::libc::c_void,
                                                                             arg2:
                                                                                 *mut ::libc::c_uchar,
                                                                             arg3:
                                                                                 size_t)
                                                                   ->
                                                                       ::libc::c_int>,
                                     p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_x509write_crt_pem(ctx: *mut mbedtls_x509write_cert,
                                     buf: *mut ::libc::c_uchar, size: size_t,
                                     f_rng:
                                         ::std::option::Option<extern "C" fn(arg1:
                                                                                 *mut ::libc::c_void,
                                                                             arg2:
                                                                                 *mut ::libc::c_uchar,
                                                                             arg3:
                                                                                 size_t)
                                                                   ->
                                                                       ::libc::c_int>,
                                     p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_dhm_init(ctx: *mut mbedtls_dhm_context) -> ();
    pub fn mbedtls_dhm_read_params(ctx: *mut mbedtls_dhm_context,
                                   p: *mut *mut ::libc::c_uchar,
                                   end: *const ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_dhm_make_params(ctx: *mut mbedtls_dhm_context,
                                   x_size: ::libc::c_int,
                                   output: *mut ::libc::c_uchar,
                                   olen: *mut size_t,
                                   f_rng:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *mut ::libc::c_void,
                                                                           arg2:
                                                                               *mut ::libc::c_uchar,
                                                                           arg3:
                                                                               size_t)
                                                                 ->
                                                                     ::libc::c_int>,
                                   p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_dhm_read_public(ctx: *mut mbedtls_dhm_context,
                                   input: *const ::libc::c_uchar,
                                   ilen: size_t) -> ::libc::c_int;
    pub fn mbedtls_dhm_make_public(ctx: *mut mbedtls_dhm_context,
                                   x_size: ::libc::c_int,
                                   output: *mut ::libc::c_uchar, olen: size_t,
                                   f_rng:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *mut ::libc::c_void,
                                                                           arg2:
                                                                               *mut ::libc::c_uchar,
                                                                           arg3:
                                                                               size_t)
                                                                 ->
                                                                     ::libc::c_int>,
                                   p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_dhm_calc_secret(ctx: *mut mbedtls_dhm_context,
                                   output: *mut ::libc::c_uchar,
                                   output_size: size_t, olen: *mut size_t,
                                   f_rng:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *mut ::libc::c_void,
                                                                           arg2:
                                                                               *mut ::libc::c_uchar,
                                                                           arg3:
                                                                               size_t)
                                                                 ->
                                                                     ::libc::c_int>,
                                   p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_dhm_free(ctx: *mut mbedtls_dhm_context) -> ();
    pub fn mbedtls_dhm_parse_dhm(dhm: *mut mbedtls_dhm_context,
                                 dhmin: *const ::libc::c_uchar,
                                 dhminlen: size_t) -> ::libc::c_int;
    pub fn mbedtls_dhm_parse_dhmfile(dhm: *mut mbedtls_dhm_context,
                                     path: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_dhm_self_test(verbose: ::libc::c_int) -> ::libc::c_int;
    pub fn mbedtls_ecdh_gen_public(grp: *mut mbedtls_ecp_group,
                                   d: *mut mbedtls_mpi,
                                   Q: *mut mbedtls_ecp_point,
                                   f_rng:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *mut ::libc::c_void,
                                                                           arg2:
                                                                               *mut ::libc::c_uchar,
                                                                           arg3:
                                                                               size_t)
                                                                 ->
                                                                     ::libc::c_int>,
                                   p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_ecdh_compute_shared(grp: *mut mbedtls_ecp_group,
                                       z: *mut mbedtls_mpi,
                                       Q: *const mbedtls_ecp_point,
                                       d: *const mbedtls_mpi,
                                       f_rng:
                                           ::std::option::Option<extern "C" fn(arg1:
                                                                                   *mut ::libc::c_void,
                                                                               arg2:
                                                                                   *mut ::libc::c_uchar,
                                                                               arg3:
                                                                                   size_t)
                                                                     ->
                                                                         ::libc::c_int>,
                                       p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_ecdh_init(ctx: *mut mbedtls_ecdh_context) -> ();
    pub fn mbedtls_ecdh_free(ctx: *mut mbedtls_ecdh_context) -> ();
    pub fn mbedtls_ecdh_make_params(ctx: *mut mbedtls_ecdh_context,
                                    olen: *mut size_t,
                                    buf: *mut ::libc::c_uchar, blen: size_t,
                                    f_rng:
                                        ::std::option::Option<extern "C" fn(arg1:
                                                                                *mut ::libc::c_void,
                                                                            arg2:
                                                                                *mut ::libc::c_uchar,
                                                                            arg3:
                                                                                size_t)
                                                                  ->
                                                                      ::libc::c_int>,
                                    p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_ecdh_read_params(ctx: *mut mbedtls_ecdh_context,
                                    buf: *mut *const ::libc::c_uchar,
                                    end: *const ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_ecdh_get_params(ctx: *mut mbedtls_ecdh_context,
                                   key: *const mbedtls_ecp_keypair,
                                   side: mbedtls_ecdh_side) -> ::libc::c_int;
    pub fn mbedtls_ecdh_make_public(ctx: *mut mbedtls_ecdh_context,
                                    olen: *mut size_t,
                                    buf: *mut ::libc::c_uchar, blen: size_t,
                                    f_rng:
                                        ::std::option::Option<extern "C" fn(arg1:
                                                                                *mut ::libc::c_void,
                                                                            arg2:
                                                                                *mut ::libc::c_uchar,
                                                                            arg3:
                                                                                size_t)
                                                                  ->
                                                                      ::libc::c_int>,
                                    p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn mbedtls_ecdh_read_public(ctx: *mut mbedtls_ecdh_context,
                                    buf: *const ::libc::c_uchar, blen: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_ecdh_calc_secret(ctx: *mut mbedtls_ecdh_context,
                                    olen: *mut size_t,
                                    buf: *mut ::libc::c_uchar, blen: size_t,
                                    f_rng:
                                        ::std::option::Option<extern "C" fn(arg1:
                                                                                *mut ::libc::c_void,
                                                                            arg2:
                                                                                *mut ::libc::c_uchar,
                                                                            arg3:
                                                                                size_t)
                                                                  ->
                                                                      ::libc::c_int>,
                                    p_rng: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> ::libc::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::libc::c_char, __maxsize: size_t,
                    __format: *const ::libc::c_char, __tp: *const Struct_tm)
     -> size_t;
    pub fn strftime_l(__s: *mut ::libc::c_char, __maxsize: size_t,
                      __format: *const ::libc::c_char, __tp: *const Struct_tm,
                      __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::libc::c_char;
    pub fn asctime_r(__tp: *const Struct_tm, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn tzset() -> ();
    pub fn stime(__when: *const time_t) -> ::libc::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::libc::c_int) -> ::libc::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: ::libc::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::libc::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> ::libc::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::libc::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::libc::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec) -> ::libc::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> ::libc::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::libc::c_int;
    pub fn mbedtls_ssl_get_ciphersuite_name(ciphersuite_id: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn mbedtls_ssl_get_ciphersuite_id(ciphersuite_name:
                                              *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_init(ssl: *mut mbedtls_ssl_context) -> ();
    pub fn mbedtls_ssl_setup(ssl: *mut mbedtls_ssl_context,
                             conf: *const mbedtls_ssl_config)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_session_reset(ssl: *mut mbedtls_ssl_context)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_conf_endpoint(conf: *mut mbedtls_ssl_config,
                                     endpoint: ::libc::c_int) -> ();
    pub fn mbedtls_ssl_conf_transport(conf: *mut mbedtls_ssl_config,
                                      transport: ::libc::c_int) -> ();
    pub fn mbedtls_ssl_conf_authmode(conf: *mut mbedtls_ssl_config,
                                     authmode: ::libc::c_int) -> ();
    pub fn mbedtls_ssl_conf_verify(conf: *mut mbedtls_ssl_config,
                                   f_vrfy:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *mut ::libc::c_void,
                                                                           arg2:
                                                                               *mut mbedtls_x509_crt,
                                                                           arg3:
                                                                               ::libc::c_int,
                                                                           arg4:
                                                                               *mut uint32_t)
                                                                 ->
                                                                     ::libc::c_int>,
                                   p_vrfy: *mut ::libc::c_void) -> ();
    pub fn mbedtls_ssl_conf_rng(conf: *mut mbedtls_ssl_config,
                                f_rng:
                                    ::std::option::Option<extern "C" fn(arg1:
                                                                            *mut ::libc::c_void,
                                                                        arg2:
                                                                            *mut ::libc::c_uchar,
                                                                        arg3:
                                                                            size_t)
                                                              ->
                                                                  ::libc::c_int>,
                                p_rng: *mut ::libc::c_void) -> ();
    pub fn mbedtls_ssl_conf_dbg(conf: *mut mbedtls_ssl_config,
                                f_dbg:
                                    ::std::option::Option<extern "C" fn(arg1:
                                                                            *mut ::libc::c_void,
                                                                        arg2:
                                                                            ::libc::c_int,
                                                                        arg3:
                                                                            *const ::libc::c_char,
                                                                        arg4:
                                                                            ::libc::c_int,
                                                                        arg5:
                                                                            *const ::libc::c_char)
                                                              -> ()>,
                                p_dbg: *mut ::libc::c_void) -> ();
    pub fn mbedtls_ssl_set_bio(ssl: *mut mbedtls_ssl_context,
                               p_bio: *mut ::libc::c_void,
                               f_send:
                                   ::std::option::Option<extern "C" fn(arg1:
                                                                           *mut ::libc::c_void,
                                                                       arg2:
                                                                           *const ::libc::c_uchar,
                                                                       arg3:
                                                                           size_t)
                                                             ->
                                                                 ::libc::c_int>,
                               f_recv:
                                   ::std::option::Option<extern "C" fn(arg1:
                                                                           *mut ::libc::c_void,
                                                                       arg2:
                                                                           *mut ::libc::c_uchar,
                                                                       arg3:
                                                                           size_t)
                                                             ->
                                                                 ::libc::c_int>,
                               f_recv_timeout:
                                   ::std::option::Option<extern "C" fn(arg1:
                                                                           *mut ::libc::c_void,
                                                                       arg2:
                                                                           *mut ::libc::c_uchar,
                                                                       arg3:
                                                                           size_t,
                                                                       arg4:
                                                                           uint32_t)
                                                             ->
                                                                 ::libc::c_int>)
     -> ();
    pub fn mbedtls_ssl_conf_read_timeout(conf: *mut mbedtls_ssl_config,
                                         timeout: uint32_t) -> ();
    pub fn mbedtls_ssl_set_timer_cb(ssl: *mut mbedtls_ssl_context,
                                    p_timer: *mut ::libc::c_void,
                                    f_set_timer:
                                        ::std::option::Option<extern "C" fn(arg1:
                                                                                *mut ::libc::c_void,
                                                                            int_ms:
                                                                                uint32_t,
                                                                            fin_ms:
                                                                                uint32_t)
                                                                  -> ()>,
                                    f_get_timer:
                                        ::std::option::Option<extern "C" fn(arg1:
                                                                                *mut ::libc::c_void)
                                                                  ->
                                                                      ::libc::c_int>)
     -> ();
    pub fn mbedtls_ssl_conf_session_tickets_cb(conf: *mut mbedtls_ssl_config,
                                               f_ticket_write:
                                                   *mut ::std::option::Option<extern "C" fn()
                                                                                  ->
                                                                                      ::libc::c_int>,
                                               f_ticket_parse:
                                                   *mut ::std::option::Option<extern "C" fn()
                                                                                  ->
                                                                                      ::libc::c_int>,
                                               p_ticket: *mut ::libc::c_void)
     -> ();
    pub fn mbedtls_ssl_conf_dtls_cookies(conf: *mut mbedtls_ssl_config,
                                         f_cookie_write:
                                             *mut ::std::option::Option<extern "C" fn()
                                                                            ->
                                                                                ::libc::c_int>,
                                         f_cookie_check:
                                             *mut ::std::option::Option<extern "C" fn()
                                                                            ->
                                                                                ::libc::c_int>,
                                         p_cookie: *mut ::libc::c_void) -> ();
    pub fn mbedtls_ssl_set_client_transport_id(ssl: *mut mbedtls_ssl_context,
                                               info: *const ::libc::c_uchar,
                                               ilen: size_t) -> ::libc::c_int;
    pub fn mbedtls_ssl_conf_dtls_anti_replay(conf: *mut mbedtls_ssl_config,
                                             mode: ::libc::c_char) -> ();
    pub fn mbedtls_ssl_conf_dtls_badmac_limit(conf: *mut mbedtls_ssl_config,
                                              limit: ::libc::c_uint) -> ();
    pub fn mbedtls_ssl_conf_handshake_timeout(conf: *mut mbedtls_ssl_config,
                                              min: uint32_t, max: uint32_t)
     -> ();
    pub fn mbedtls_ssl_conf_session_cache(conf: *mut mbedtls_ssl_config,
                                          p_cache: *mut ::libc::c_void,
                                          f_get_cache:
                                              ::std::option::Option<extern "C" fn(arg1:
                                                                                      *mut ::libc::c_void,
                                                                                  arg2:
                                                                                      *mut mbedtls_ssl_session)
                                                                        ->
                                                                            ::libc::c_int>,
                                          f_set_cache:
                                              ::std::option::Option<extern "C" fn(arg1:
                                                                                      *mut ::libc::c_void,
                                                                                  arg2:
                                                                                      *const mbedtls_ssl_session)
                                                                        ->
                                                                            ::libc::c_int>)
     -> ();
    pub fn mbedtls_ssl_set_session(ssl: *mut mbedtls_ssl_context,
                                   session: *const mbedtls_ssl_session)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_conf_ciphersuites(conf: *mut mbedtls_ssl_config,
                                         ciphersuites: *const ::libc::c_int)
     -> ();
    pub fn mbedtls_ssl_conf_ciphersuites_for_version(conf:
                                                         *mut mbedtls_ssl_config,
                                                     ciphersuites:
                                                         *const ::libc::c_int,
                                                     major: ::libc::c_int,
                                                     minor: ::libc::c_int)
     -> ();
    pub fn mbedtls_ssl_conf_cert_profile(conf: *mut mbedtls_ssl_config,
                                         profile:
                                             *const mbedtls_x509_crt_profile)
     -> ();
    pub fn mbedtls_ssl_conf_ca_chain(conf: *mut mbedtls_ssl_config,
                                     ca_chain: *mut mbedtls_x509_crt,
                                     ca_crl: *mut mbedtls_x509_crl) -> ();
    pub fn mbedtls_ssl_conf_own_cert(conf: *mut mbedtls_ssl_config,
                                     own_cert: *mut mbedtls_x509_crt,
                                     pk_key: *mut mbedtls_pk_context)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_conf_psk(conf: *mut mbedtls_ssl_config,
                                psk: *const ::libc::c_uchar, psk_len: size_t,
                                psk_identity: *const ::libc::c_uchar,
                                psk_identity_len: size_t) -> ::libc::c_int;
    pub fn mbedtls_ssl_set_hs_psk(ssl: *mut mbedtls_ssl_context,
                                  psk: *const ::libc::c_uchar,
                                  psk_len: size_t) -> ::libc::c_int;
    pub fn mbedtls_ssl_conf_psk_cb(conf: *mut mbedtls_ssl_config,
                                   f_psk:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *mut ::libc::c_void,
                                                                           arg2:
                                                                               *mut mbedtls_ssl_context,
                                                                           arg3:
                                                                               *const ::libc::c_uchar,
                                                                           arg4:
                                                                               size_t)
                                                                 ->
                                                                     ::libc::c_int>,
                                   p_psk: *mut ::libc::c_void) -> ();
    pub fn mbedtls_ssl_conf_dh_param(conf: *mut mbedtls_ssl_config,
                                     dhm_P: *const ::libc::c_char,
                                     dhm_G: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_conf_dh_param_ctx(conf: *mut mbedtls_ssl_config,
                                         dhm_ctx: *mut mbedtls_dhm_context)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_conf_dhm_min_bitlen(conf: *mut mbedtls_ssl_config,
                                           bitlen: ::libc::c_uint) -> ();
    pub fn mbedtls_ssl_conf_curves(conf: *mut mbedtls_ssl_config,
                                   curves: *const mbedtls_ecp_group_id) -> ();
    pub fn mbedtls_ssl_conf_sig_hashes(conf: *mut mbedtls_ssl_config,
                                       hashes: *const ::libc::c_int) -> ();
    pub fn mbedtls_ssl_set_hostname(ssl: *mut mbedtls_ssl_context,
                                    hostname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_set_hs_own_cert(ssl: *mut mbedtls_ssl_context,
                                       own_cert: *mut mbedtls_x509_crt,
                                       pk_key: *mut mbedtls_pk_context)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_set_hs_ca_chain(ssl: *mut mbedtls_ssl_context,
                                       ca_chain: *mut mbedtls_x509_crt,
                                       ca_crl: *mut mbedtls_x509_crl) -> ();
    pub fn mbedtls_ssl_set_hs_authmode(ssl: *mut mbedtls_ssl_context,
                                       authmode: ::libc::c_int) -> ();
    pub fn mbedtls_ssl_conf_sni(conf: *mut mbedtls_ssl_config,
                                f_sni:
                                    ::std::option::Option<extern "C" fn(arg1:
                                                                            *mut ::libc::c_void,
                                                                        arg2:
                                                                            *mut mbedtls_ssl_context,
                                                                        arg3:
                                                                            *const ::libc::c_uchar,
                                                                        arg4:
                                                                            size_t)
                                                              ->
                                                                  ::libc::c_int>,
                                p_sni: *mut ::libc::c_void) -> ();
    pub fn mbedtls_ssl_conf_alpn_protocols(conf: *mut mbedtls_ssl_config,
                                           protos: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_get_alpn_protocol(ssl: *const mbedtls_ssl_context)
     -> *const ::libc::c_char;
    pub fn mbedtls_ssl_conf_max_version(conf: *mut mbedtls_ssl_config,
                                        major: ::libc::c_int,
                                        minor: ::libc::c_int) -> ();
    pub fn mbedtls_ssl_conf_min_version(conf: *mut mbedtls_ssl_config,
                                        major: ::libc::c_int,
                                        minor: ::libc::c_int) -> ();
    pub fn mbedtls_ssl_conf_fallback(conf: *mut mbedtls_ssl_config,
                                     fallback: ::libc::c_char) -> ();
    pub fn mbedtls_ssl_conf_encrypt_then_mac(conf: *mut mbedtls_ssl_config,
                                             etm: ::libc::c_char) -> ();
    pub fn mbedtls_ssl_conf_extended_master_secret(conf:
                                                       *mut mbedtls_ssl_config,
                                                   ems: ::libc::c_char) -> ();
    pub fn mbedtls_ssl_conf_arc4_support(conf: *mut mbedtls_ssl_config,
                                         arc4: ::libc::c_char) -> ();
    pub fn mbedtls_ssl_conf_max_frag_len(conf: *mut mbedtls_ssl_config,
                                         mfl_code: ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_conf_truncated_hmac(conf: *mut mbedtls_ssl_config,
                                           truncate: ::libc::c_int) -> ();
    pub fn mbedtls_ssl_conf_cbc_record_splitting(conf:
                                                     *mut mbedtls_ssl_config,
                                                 split: ::libc::c_char) -> ();
    pub fn mbedtls_ssl_conf_session_tickets(conf: *mut mbedtls_ssl_config,
                                            use_tickets: ::libc::c_int) -> ();
    pub fn mbedtls_ssl_conf_renegotiation(conf: *mut mbedtls_ssl_config,
                                          renegotiation: ::libc::c_int) -> ();
    pub fn mbedtls_ssl_conf_legacy_renegotiation(conf:
                                                     *mut mbedtls_ssl_config,
                                                 allow_legacy: ::libc::c_int)
     -> ();
    pub fn mbedtls_ssl_conf_renegotiation_enforced(conf:
                                                       *mut mbedtls_ssl_config,
                                                   max_records: ::libc::c_int)
     -> ();
    pub fn mbedtls_ssl_conf_renegotiation_period(conf:
                                                     *mut mbedtls_ssl_config,
                                                 period: *mut ::libc::c_uchar)
     -> ();
    pub fn mbedtls_ssl_get_bytes_avail(ssl: *const mbedtls_ssl_context)
     -> size_t;
    pub fn mbedtls_ssl_get_verify_result(ssl: *const mbedtls_ssl_context)
     -> uint32_t;
    pub fn mbedtls_ssl_get_ciphersuite(ssl: *const mbedtls_ssl_context)
     -> *const ::libc::c_char;
    pub fn mbedtls_ssl_get_version(ssl: *const mbedtls_ssl_context)
     -> *const ::libc::c_char;
    pub fn mbedtls_ssl_get_record_expansion(ssl: *const mbedtls_ssl_context)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_get_max_frag_len(ssl: *const mbedtls_ssl_context)
     -> size_t;
    pub fn mbedtls_ssl_get_peer_cert(ssl: *const mbedtls_ssl_context)
     -> *const mbedtls_x509_crt;
    pub fn mbedtls_ssl_get_session(ssl: *const mbedtls_ssl_context,
                                   session: *mut mbedtls_ssl_session)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_handshake(ssl: *mut mbedtls_ssl_context)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_handshake_step(ssl: *mut mbedtls_ssl_context)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_renegotiate(ssl: *mut mbedtls_ssl_context)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_read(ssl: *mut mbedtls_ssl_context,
                            buf: *mut ::libc::c_uchar, len: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_write(ssl: *mut mbedtls_ssl_context,
                             buf: *const ::libc::c_uchar, len: size_t)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_send_alert_message(ssl: *mut mbedtls_ssl_context,
                                          level: ::libc::c_uchar,
                                          message: ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_close_notify(ssl: *mut mbedtls_ssl_context)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_free(ssl: *mut mbedtls_ssl_context) -> ();
    pub fn mbedtls_ssl_config_init(conf: *mut mbedtls_ssl_config) -> ();
    pub fn mbedtls_ssl_config_defaults(conf: *mut mbedtls_ssl_config,
                                       endpoint: ::libc::c_int,
                                       transport: ::libc::c_int,
                                       preset: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mbedtls_ssl_config_free(conf: *mut mbedtls_ssl_config) -> ();
    pub fn mbedtls_ssl_session_init(session: *mut mbedtls_ssl_session) -> ();
    pub fn mbedtls_ssl_session_free(session: *mut mbedtls_ssl_session) -> ();
}
